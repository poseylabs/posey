apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-agents
  namespace: {{ .Release.Namespace | default "default" }}
  labels:
    app: {{ .Release.Name }}-agents
    tier: backend
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.services.agents.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-agents
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-agents
        tier: backend
    spec:
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.image.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
      - name: agents
        {{- if .Values.devMode }}
        # In dev mode, use a python image for testing
        image: "python:3.10-slim"
        command: ["python", "-c"]
        args: ["import http.server; import socketserver; import json; from http import HTTPStatus; class Handler(http.server.SimpleHTTPRequestHandler): def do_GET(self): if self.path == '/health': self.send_response(HTTPStatus.OK); self.send_header('Content-Type', 'text/plain'); self.end_headers(); self.wfile.write(b'OK'); else: self.send_response(HTTPStatus.OK); self.send_header('Content-Type', 'application/json'); self.end_headers(); self.wfile.write(json.dumps({'message': 'Agents Service Mock'}).encode()); print('Agents Service Mock running on port {{ .Values.services.agents.containerPort | default 8080 }}'); httpd = socketserver.TCPServer(('', {{ .Values.services.agents.containerPort | default 8080 }}), Handler); httpd.serve_forever()"]
        {{- else }}
        image: "{{ .Values.image.registry }}/posey-agents:{{ .Values.image.tag | default .Chart.AppVersion }}"
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        ports:
        - containerPort: {{ .Values.services.agents.containerPort | default 8080 }}
          name: http
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: NODE_ENV
          value: {{ .Values.environment.nodeEnv | quote }}
        - name: AGENTS_PORT
          value: {{ .Values.services.agents.port | quote }}
        - name: POSTGRES_HOST
          value: {{ .Values.services.postgres.host | quote }}
        - name: POSTGRES_PORT
          value: {{ .Values.services.postgres.port | quote }}
        - name: POSTGRES_USER
          value: {{ .Values.services.postgres.user | quote }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-api-secrets
              key: postgres-password
              optional: true
        - name: POSTGRES_DB_POSEY
          value: {{ .Values.databases.postgres.dbPosey | quote }}
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-api-secrets
              key: anthropic-api-key
              optional: true
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-api-secrets
              key: openai-api-key
              optional: true
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5 