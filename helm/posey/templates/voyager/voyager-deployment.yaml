apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-voyager
  labels:
    app: {{ .Release.Name }}-voyager
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-voyager
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-voyager
    spec:
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.image.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: voyager
          {{- if .Values.devMode }}
          # In dev mode, use a standard node image for testing
          image: "node:18-alpine"
          command: ["node"]
          args: ["-e", "console.log('Voyager Service Mock running on port 3030'); const http = require('http'); const server = http.createServer((req, res) => { res.writeHead(200); if (req.url === '/health') { res.end('OK'); } else { res.end('Voyager Service Mock'); } }); server.listen(3030);"]
          {{- else }}
          image: "{{ .Values.image.registry }}/posey-voyager:{{ .Values.image.tag }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 3030
              name: http
          env:
            - name: NODE_ENV
              value: {{ .Values.environment.nodeEnv | quote }}
            - name: DEBUG
              value: {{ .Values.environment.debug | quote }}
            - name: QDRANT_HOST
              value: {{ .Values.services.qdrant.host | quote }}
            - name: QDRANT_PORT
              value: {{ .Values.services.qdrant.port | quote }}
            - name: QDRANT_COLLECTION
              value: {{ .Values.services.qdrant.collection | quote }}
            - name: QDRANT_DOMAIN
              value: {{ .Values.services.qdrant.domain | quote }}
            - name: EMBEDDING_MODEL
              value: {{ .Values.ai.embeddingModel | quote }}
            # Add any additional environment variables required by Voyager
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "200m"
              memory: "256Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5 