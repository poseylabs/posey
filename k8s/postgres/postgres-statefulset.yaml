apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: posey-postgres
  namespace: default
  labels:
    app: posey-postgres
    tier: database
spec:
  # Using the service name to create stable network identities
  serviceName: posey-postgres
  replicas: 1  # Single replica for PostgreSQL (for production, consider HA setup)
  selector:
    matchLabels:
      app: posey-postgres
  template:
    metadata:
      labels:
        app: posey-postgres
        tier: database
    spec:
      # Init container to initialize data directory permissions
      initContainers:
      - name: init-postgres-data-dir
        image: busybox
        command: 
        - sh
        - -c
        - |
          chown -R 999:999 /var/lib/postgresql/data
          chmod 700 /var/lib/postgresql/data
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: postgres
        image: postgres:15  # Specify the version you want to use
        ports:
        - containerPort: 5432
          name: postgres
        # Resource limits and requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        # Environment variables from Secret
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_DB_POSEY
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        # Volume mounting for persistent data
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        # Liveness probe to check if the database is running
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres  # Use a fixed username instead of environment variable interpolation which may cause issues
          initialDelaySeconds: 60  # Increased from 30 to give more time for startup
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        # Readiness probe to check if the database is ready to accept connections
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres  # Use a fixed username instead of environment variable interpolation
          initialDelaySeconds: 30  # Increased from 5 to give more time for startup
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      # Use volume claims templates for StatefulSets
      volumeClaimTemplates:
      - metadata:
          name: postgres-data
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 10Gi
          storageClassName: do-block-storage 