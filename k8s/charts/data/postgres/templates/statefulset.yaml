apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common-helpers.fullname" . }}
  labels:
    {{- include "common-helpers.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount | default .Values.global.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "common-helpers.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "common-helpers.fullname" . }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common-helpers.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "common-helpers.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      containers:
        - name: {{ .Chart.Name }}
          image: {{ include "postgres.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy | default "Always" }}
          ports:
            - name: tcp-postgres
              containerPort: {{- .Values.service.port -}}
              protocol: {{- "TCP" -}}
          # env:
          #   - name: POSTGRES_PORT
          #     valueFrom:
          #       secretKeyRef:
          #         name: {{ .Values.existingSecret }}
          #         key: POSTGRES_PORT
          #         optional: true
          #   - name: POSTGRES_DB
          #     valueFrom:
          #       secretKeyRef:
          #         name: {{ .Values.existingSecret }}
          #         key: POSTGRES_DB
          #   - name: POSTGRES_USER
          #     valueFrom:
          #       secretKeyRef:
          #         name: {{ .Values.existingSecret }}
          #         key: POSTGRES_USER
          #   - name: POSTGRES_PASSWORD
          #     valueFrom:
          #       secretKeyRef:
          #         name: {{ .Values.existingSecret }}
          #         key: POSTGRES_PASSWORD
          livenessProbe:
            tcpSocket:
              port: {{- .Values.service.port -}}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - "$(POSTGRES_USER)"
                - -d
                - "$(POSTGRES_DB)"
                - -h
                - 127.0.0.1
                - -p
                - "$(POSTGRES_PORT)"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            limits:
              cpu: {{ .Values.global.resources.limits.cpu | quote }}
              memory: {{ .Values.global.resources.limits.memory | quote }}
            requests:
              cpu: {{ .Values.global.resources.requests.cpu | quote }}
              memory: {{ .Values.global.resources.requests.memory | quote }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "common-helpers.fullname" . }}-pvc
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}