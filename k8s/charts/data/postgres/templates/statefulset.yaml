# /k8s/charts/data/postgres/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common-helpers.fullname" . }}
  labels:
    {{- include "common-helpers.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount | default .Values.global.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "common-helpers.selectorLabels" . | nindent 6 }}
  # Use the Service name generated by the helper
  serviceName: {{ include "common-helpers.fullname" . }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  template:
    metadata:
      annotations:
        # Add pod annotations from values
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        # Standard selector labels plus any custom ones if needed
        {{- include "common-helpers.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # Use common service account name helper
      serviceAccountName: {{ include "common-helpers.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      containers:
        - name: {{ .Chart.Name }}
          # securityContext: # Add specific security context if needed
          # Use the postgres-specific image helper
          image: {{ include "postgres.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy | default "Always" }}
          ports:
            - name: tcp-postgres
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            # Inject port from the existing Secret or use the value from values.yaml
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret }}
                  key: POSTGRES_PORT
                  optional: true # Make it optional so it falls back if not in secret
            # Inject sensitive DB name from the existing Secret
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret }}
                  key: POSTGRES_DB
            # Inject sensitive user name from the existing Secret
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret }}
                  key: POSTGRES_USER
            # Inject sensitive password from the existing Secret
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  # Use the secret name defined in values.yaml
                  name: {{ .Values.existingSecret }}
                  key: POSTGRES_PASSWORD
          # Liveness and Readiness Probes (using env var for port if available)
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - "$(POSTGRES_USER)" # Refers to env var above
                - -d
                - "$(POSTGRES_DB)"   # Refers to env var above
                - -h
                - 127.0.0.1
                - -p
                - "$(POSTGRES_PORT)" # Use env var for port
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          # Resources block - uses global defaults if not overridden in chart values
          resources:
            limits:
              cpu: {{ .Values.global.resources.limits.cpu | quote }}
              memory: {{ .Values.global.resources.limits.memory | quote }}
            requests:
              cpu: {{ .Values.global.resources.requests.cpu | quote }}
              memory: {{ .Values.global.resources.requests.memory | quote }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      volumes:
        # Define the volume using the PVC created by pvc.yaml
        # This assumes a separate PVC; adjust if using volumeClaimTemplates
        - name: data
          persistentVolumeClaim:
            # Use common fullname helper for the claim name
            claimName: {{ include "common-helpers.fullname" . }}-pvc
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
  # volumeClaimTemplates: # Use this instead of separate PVC if scaling > 1 replica
  # - metadata:
  #     name: data
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     storageClassName: {{ .Values.persistence.storageClassName | quote }}
  #     resources:
  #       requests:
  #         storage: {{ .Values.persistence.size | quote }} 