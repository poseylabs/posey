name: Build ML Base Image

on:
  workflow_dispatch:  # Manual trigger option
  push:
    branches:
      - main
      - develop
    paths:
      - 'services/agents/docker/ml-base/**'
      - '.github/workflows/docker-ml-base-image.yml'

env:
  DOCTL_VERSION: 1.92.1
  DO_REGISTRY_NAME: posey
  ML_BASE_IMAGE_NAME: agents-ml-base
  # Add Docker build parameters for better performance
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain
  # Add pip environment variables to help with installation
  PIP_TIMEOUT: 200
  PIP_DEFAULT_TIMEOUT: 200
  PIP_RETRIES: 5

jobs:
  build-ml-base:
    name: Build ML Base Image
    runs-on:
      group: posey-runners
    environment: PRODUCTION
    timeout-minutes: 180
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check system resources
        run: |
          echo "=== SYSTEM INFO ==="
          free -h
          df -h
          cat /proc/cpuinfo | grep "model name" | head -1
          cat /proc/meminfo | grep MemTotal
          echo "===================="
      
      # Cache pip packages to speed up builds  
      - name: Set up pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/agents/docker/ml-base/ml-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install doctl
        run: |
          cd /tmp
          curl -sL --retry 5 --retry-delay 2 https://github.com/digitalocean/doctl/releases/download/v${{ env.DOCTL_VERSION }}/doctl-${{ env.DOCTL_VERSION }}-linux-arm64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin/
          doctl version
          doctl auth init -t ${{ secrets.DO_API_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: |
          doctl registry login --expiry-seconds 14400  # Extended token validity (4 hours)
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0
          
      - name: Docker Buildx Configuration
        run: |
          docker buildx create --name multiplatform-builder --driver docker-container --use
          docker buildx inspect --bootstrap
          
      - name: Pull previous images for layer cache
        run: |
          # Pull latest image for caching if available
          docker pull registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:latest || true
          echo "Pulled latest image for layer caching"
      
      - name: Modify Dockerfile for better performance
        run: |
          # Check current directory and ML base dockerfile location
          cd services/agents/docker/ml-base
          
          # Create an optimized Dockerfile with better caching
          cat > Dockerfile.optimized << 'EOF'
          # syntax=docker/dockerfile:1.4
          FROM --platform=$BUILDPLATFORM python:3.12-slim

          # Set ARG for platform targeting
          ARG TARGETPLATFORM
          ARG BUILDPLATFORM
          RUN echo "Building on $BUILDPLATFORM for $TARGETPLATFORM"

          # Set environment variables
          ENV PYTHONDONTWRITEBYTECODE=1 \
            PYTHONUNBUFFERED=1 \
            PIP_NO_CACHE_DIR=0 \
            PIP_DISABLE_PIP_VERSION_CHECK=1 \
            # Add retry and timeout settings
            PIP_RETRIES=5 \
            PIP_TIMEOUT=200 \
            PIP_DEFAULT_TIMEOUT=200 \
            # Explicitly disable CUDA to prevent hangs
            CUDA_VISIBLE_DEVICES="" \
            TORCH_CUDA_ARCH_LIST="None" \
            USE_CUDA=0

          # Install system dependencies
          RUN --mount=type=cache,target=/var/cache/apt \
              apt-get update && apt-get install -y --no-install-recommends \
              gcc \
              g++ \
              make \
              cmake \
              libc6-dev \
              libpq-dev \
              git \
              curl \
              ca-certificates \
              libmagic1 \
              postgresql-client \
              postgresql-server-dev-all \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*

          # Upgrade pip and install wheel
          RUN --mount=type=cache,target=/root/.cache/pip \
              pip install --upgrade pip wheel setuptools

          WORKDIR /tmp/build

          # Copy only requirements file first (better caching)
          COPY ml-requirements.txt .

          # Install core numerical packages with cache mount
          RUN --mount=type=cache,target=/root/.cache/pip \
              pip install numpy pandas scipy

          # Install PyTorch with cache mount
          RUN --mount=type=cache,target=/root/.cache/pip \
              pip install torch --extra-index-url https://download.pytorch.org/whl/cpu

          # Install transformer libraries with cache mount
          RUN --mount=type=cache,target=/root/.cache/pip \
              grep "^transformers" ml-requirements.txt | xargs pip install

          RUN --mount=type=cache,target=/root/.cache/pip \
              grep "^sentence-transformers" ml-requirements.txt | xargs pip install

          # Install LangChain packages with cache mount
          RUN --mount=type=cache,target=/root/.cache/pip \
              grep "^langchain" ml-requirements.txt | xargs pip install

          # Install remaining packages with cache mount - filter out comments and empty lines
          RUN --mount=type=cache,target=/root/.cache/pip \
              cat ml-requirements.txt | grep -v "^#\|^torch\|^transformers\|^sentence-transformers\|^langchain\|^numpy\|^pandas\|^scipy" | grep -v "^\s*$" | xargs -r pip install

          # Verify installation
          RUN python -c "import torch; import transformers; import langchain; print('PyTorch version:', torch.__version__); print('CUDA available:', torch.cuda.is_available()); print('Transformers version:', transformers.__version__); print('ML dependencies installed successfully')"

          # Clean up and prepare final image
          RUN rm -rf /tmp/build
          WORKDIR /app

          # Create a non-root user
          RUN groupadd -r posey-agents && useradd -r -g posey-agents posey-agents && \
              mkdir -p /app && \
              chown -R posey-agents:posey-agents /app

          # Label the image
          LABEL org.opencontainers.image.description="Posey Agents ML Base Image with PyTorch, Transformers, and other heavy dependencies pre-installed"
          LABEL org.opencontainers.image.source="https://github.com/posey/posey" 

          CMD ["python"]
          EOF
          
          # Use the optimized Dockerfile
          mv Dockerfile.optimized Dockerfile
          
          echo "Modified Dockerfile for better layer management and caching:"
          cat Dockerfile
          
      - name: Build ML Base Image - AMD64
        id: build-amd64
        timeout-minutes: 120
        run: |
          # Change to ML base directory
          cd services/agents/docker/ml-base
          
          echo "Building ML base image for AMD64..."
          
          # Get current date for versioning
          DATE_TAG=$(date +%Y%m%d)
          GIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Build AMD64 image first - more likely to succeed and useful on its own
          docker buildx build \
            --platform linux/amd64 \
            --memory=14g \
            --memory-swap=16g \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg PIP_TIMEOUT=200 \
            --build-arg PIP_DEFAULT_TIMEOUT=200 \
            --build-arg PIP_RETRIES=5 \
            --cache-from registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:latest \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:amd64-latest \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:amd64-${DATE_TAG} \
            -f Dockerfile \
            --output type=docker,dest=ml-base-amd64.tar \
            .
            
          echo "ML base AMD64 image built successfully"

      - name: Push AMD64 Image with Retry
        run: |
          cd services/agents/docker/ml-base
          # Load the image from tar
          docker load -i ml-base-amd64.tar
          
          # Push with retry logic
          attempt=1
          max_attempts=5
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt to push AMD64 image to registry..."
            if docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:amd64-latest; then
              echo "Push successful on attempt $attempt"
              break
            else
              echo "Push failed on attempt $attempt"
              
              if [ $attempt -eq $max_attempts ]; then
                echo "All attempts failed, giving up"
                exit 1
              fi
              
              # Exponential backoff
              sleep_time=$((10 * 2 ** (attempt - 1)))
              echo "Waiting ${sleep_time}s before retry..."
              sleep $sleep_time
              
              # Refresh login token
              doctl registry login --expiry-seconds 14400
              
              attempt=$((attempt + 1))
            fi
          done
          
          # Push the date-tagged version
          DATE_TAG=$(date +%Y%m%d)
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:amd64-${DATE_TAG}
            
      - name: Build ML Base Image - ARM64
        id: build-arm64
        timeout-minutes: 120
        run: |
          # Only attempt ARM64 build if AMD64 succeeded
          cd services/agents/docker/ml-base
          
          echo "Building ML base image for ARM64..."
          
          # Get current date for versioning
          DATE_TAG=$(date +%Y%m%d)
          GIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Build ARM64 image 
          docker buildx build \
            --platform linux/arm64 \
            --memory=14g \
            --memory-swap=16g \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg PIP_TIMEOUT=200 \
            --build-arg PIP_DEFAULT_TIMEOUT=200 \
            --build-arg PIP_RETRIES=5 \
            --cache-from registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:amd64-latest \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:arm64-latest \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:arm64-${DATE_TAG} \
            -f Dockerfile \
            --output type=docker,dest=ml-base-arm64.tar \
            .
            
          echo "ML base ARM64 image built successfully"
        
      - name: Push ARM64 Image with Retry
        run: |
          cd services/agents/docker/ml-base
          # Check if ARM64 image was built
          if [ ! -f ml-base-arm64.tar ]; then
            echo "ARM64 image not built, skipping push"
            exit 0
          fi
          
          # Load the image from tar
          docker load -i ml-base-arm64.tar
          
          # Push with retry logic
          attempt=1
          max_attempts=5
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt to push ARM64 image to registry..."
            if docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:arm64-latest; then
              echo "Push successful on attempt $attempt"
              break
            else
              echo "Push failed on attempt $attempt"
              
              if [ $attempt -eq $max_attempts ]; then
                echo "All attempts failed, giving up"
                exit 1
              fi
              
              # Exponential backoff
              sleep_time=$((10 * 2 ** (attempt - 1)))
              echo "Waiting ${sleep_time}s before retry..."
              sleep $sleep_time
              
              # Refresh login token
              doctl registry login --expiry-seconds 14400
              
              attempt=$((attempt + 1))
            fi
          done
          
          # Push the date-tagged version
          DATE_TAG=$(date +%Y%m%d)
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:arm64-${DATE_TAG}
          
      - name: Create and Push Multi-Architecture Manifest
        run: |
          # Create and push manifest to combine AMD64 and ARM64 images
          DATE_TAG=$(date +%Y%m%d)
          
          # Create manifest for latest tag
          docker manifest create \
            registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:latest \
            registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:amd64-latest \
            registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:arm64-latest || true
            
          # Create manifest for date tag
          docker manifest create \
            registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:${DATE_TAG} \
            registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:amd64-${DATE_TAG} \
            registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:arm64-${DATE_TAG} || true
            
          # Push manifests with retry
          for tag in latest ${DATE_TAG}; do
            attempt=1
            max_attempts=5
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt to push manifest for ${tag}..."
              if docker manifest push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:${tag}; then
                echo "Manifest push successful on attempt $attempt"
                break
              else
                echo "Manifest push failed on attempt $attempt"
                
                if [ $attempt -eq $max_attempts ]; then
                  echo "All attempts failed, giving up"
                  exit 1
                fi
                
                # Exponential backoff
                sleep_time=$((10 * 2 ** (attempt - 1)))
                echo "Waiting ${sleep_time}s before retry..."
                sleep $sleep_time
                
                # Refresh login token
                doctl registry login --expiry-seconds 14400
                
                attempt=$((attempt + 1))
              fi
            done
          done
            
      - name: Verify ML Base Image
        run: |
          echo "Verifying ML base image was pushed successfully..."
          docker manifest inspect registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${ML_BASE_IMAGE_NAME}:latest
          echo "ML base image build and push successful!" 