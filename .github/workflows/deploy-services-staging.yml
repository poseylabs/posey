name: Deploy Services to Staging

on:
  push:
    branches:
      - develop
      - feature/*
    paths:
      - 'services/**'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'services/**'
  workflow_dispatch:
    inputs:
      service:
        description: 'Specific service to deploy (optional)'
        required: false
        type: string

jobs:
  build-and-deploy-staging:
    name: Build and Deploy Services to Staging
    runs-on: ubuntu-latest-4-cores
    
    env:
      DOCTL_VERSION: 1.92.1
      KUBE_CLUSTER_ID: ${{ secrets.DO_KUBERNETES_CLUSTER_ID_STAGING }}
      SUPERTOKENS_API_KEY: ${{ secrets.SUPERTOKENS_API_KEY }}
      SUPERTOKENS_DASHBOARD_PASSWORD: ${{ secrets.SUPERTOKENS_DASHBOARD_PASSWORD }}
      GRAPH_API_SECRET: ${{ secrets.GRAPH_API_SECRET }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_DB_POSEY: ${{ secrets.POSTGRES_DB_POSEY }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST || 'posey-postgres' }}
      COUCHBASE_USER: ${{ secrets.COUCHBASE_USER }}
      COUCHBASE_PASSWORD: ${{ secrets.COUCHBASE_PASSWORD }}
      COUCHBASE_BUCKET: ${{ secrets.COUCHBASE_BUCKET }}
      ENVIRONMENT: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Enable Corepack
        run: |
          corepack enable
          yarn --version
          
      - name: Install dependencies
        run: |
          cd services
          yarn install
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}
          
      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ env.KUBE_CLUSTER_ID }}
        
      - name: Create .env file
        run: |
          cd services
          # Create .env file with required variables
          cat > .env << EOF
          # Environment
          ENVIRONMENT=${{ env.ENVIRONMENT }}
          DOCKER_REGISTRY=registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}
          
          # Database Connections
          POSTGRES_USER=${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
          POSTGRES_PORT=${{ env.POSTGRES_PORT }}
          POSTGRES_DB_POSEY=${{ env.POSTGRES_DB_POSEY }}
          POSTGRES_HOST=${{ env.POSTGRES_HOST }}
          COUCHBASE_USER=${{ env.COUCHBASE_USER }}
          COUCHBASE_PASSWORD=${{ env.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ env.COUCHBASE_BUCKET }}
          
          # Auth
          SUPERTOKENS_API_KEY=${{ env.SUPERTOKENS_API_KEY }}
          SUPERTOKENS_DASHBOARD_PASSWORD=${{ env.SUPERTOKENS_DASHBOARD_PASSWORD }}
          GRAPH_API_SECRET=${{ env.GRAPH_API_SECRET }}
          
          # Add any additional environment variables needed
          ${{ secrets.ADDITIONAL_ENV_VARS }}
          EOF
          
          echo "Created .env file for services staging deployment"

      - name: Free disk space
        run: |
          echo "Checking available disk space before cleanup:"
          df -h
          
          # Remove unnecessary large directories
          echo "Removing unnecessary large directories..."
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          # Clean Docker cache
          echo "Cleaning Docker cache..."
          docker system prune -af
          
          echo "Available disk space after cleanup:"
          df -h
        
      - name: Build Docker images
        run: |
          cd services
          if [[ -n "${{ github.event.inputs.service }}" ]]; then
            echo "Building specific service: ${{ github.event.inputs.service }}"
            yarn build:local -- --service ${{ github.event.inputs.service }}
          else
            echo "Building all services"
            yarn build:local
          fi
        
      - name: Tag and push Docker images
        run: |
          # Get the short SHA of the commit
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Add PR or branch identifier for staging
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IDENTIFIER="pr-${{ github.event.pull_request.number }}"
          else
            IDENTIFIER=$(echo ${{ github.ref_name }} | tr '/' '-')
          fi
          
          cd services
          
          # Get all services images
          SERVICES_IMAGES=$(docker images | grep 'posey' | grep -v 'postgres\|couchbase\|qdrant\|vector' | awk '{print $1}')
          
          if [ -z "$SERVICES_IMAGES" ]; then
            echo "No service images found to push"
            docker images
            exit 1
          fi

          echo "Found service images: $SERVICES_IMAGES"
          
          # Refresh registry login just before pushing
          doctl registry login --expiry-seconds 1200
          
          # Tag and push all service images
          for IMAGE in $SERVICES_IMAGES; do
            if [[ -n "${{ github.event.inputs.service }}" && ! "$IMAGE" =~ "${{ github.event.inputs.service }}" ]]; then
              echo "Skipping $IMAGE (not the specified service)"
              continue
            fi
            
            echo "Tagging and pushing $IMAGE"

            # Extract the image name without registry prefix if present
            IMAGE_NAME=$(echo $IMAGE | sed 's|^.*/||')
            echo "Extracted image name: $IMAGE_NAME"
            
            # Tag with SHA, PR/branch identifier, and staging
            docker tag $IMAGE registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:${SHORT_SHA}
            docker tag $IMAGE registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:${IDENTIFIER}
            docker tag $IMAGE registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:staging
            
            # Push all tags
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:${SHORT_SHA}
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:${IDENTIFIER}
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:staging
          done
        
      - name: Deploy to Kubernetes staging namespace
        run: |
          cd services
          
          # Create or update staging namespace
          kubectl create namespace posey-staging --dry-run=client -o yaml | kubectl apply -f -
          
          # Set namespace for deployment
          export KUBE_NAMESPACE="posey-staging"
          
          if [[ -n "${{ github.event.inputs.service }}" ]]; then
            echo "Deploying specific service: ${{ github.event.inputs.service }} to namespace $KUBE_NAMESPACE"
            yarn deploy:local -- --service ${{ github.event.inputs.service }} --staging
          else
            echo "Deploying all services to namespace $KUBE_NAMESPACE"
            yarn deploy:local -- --staging
          fi
        
      - name: Verify staging deployment
        run: |
          echo "Checking pod status in namespace posey-staging:"
          kubectl get pods -n posey-staging -l part-of=posey-platform
          
      - name: Add deployment URL as PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const deploymentUrl = 'https://staging-${{ github.event.pull_request.number }}.posey.ai';
            
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Services deployed to staging!\n\nYou can access the deployment at: ${deploymentUrl}`
            });
           
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Services deployment to staging successful"
          echo "Services are available at:"
          echo "- Auth API: https://auth.staging.posey.ai"
          echo "- MCP API: https://mcp.staging.posey.ai"
          echo "- Voyager API: https://voyager.staging.posey.ai"
          echo "- Agents API: https://agents.staging.posey.ai"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Services deployment to staging failed"
