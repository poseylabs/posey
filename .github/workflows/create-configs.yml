name: Create ConfigMaps and Secrets

on:
  workflow_call: # This workflow is meant to be called by other workflows

jobs:
  create-configs:
    name: Create ConfigMaps and Secrets
    runs-on: ubuntu-latest
    environment: PRODUCTION
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set up Kubernetes config
        run: doctl kubernetes cluster kubeconfig save posey-cluster

      #----------------------------------------------
      # Create ConfigMaps for non-sensitive configuration
      #----------------------------------------------
      - name: Create Postgres ConfigMap
        run: |
          # Set variables with proper quoting
          POSTGRES_PORT="3333"
          POSTGRES_HOST="${{ vars.POSTGRES_HOST || 'posey-postgres' }}"
          
          kubectl create configmap postgres-config \
            --from-literal=POSTGRES_PORT="$POSTGRES_PORT" \
            --from-literal=POSTGRES_HOST="$POSTGRES_HOST" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Database URLs ConfigMap
        run: |
          # Set variables with proper quoting
          POSTGRES_USER="${{ vars.POSTGRES_USER }}"
          POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          POSTGRES_HOST="${{ vars.POSTGRES_HOST || 'posey-postgres' }}"
          POSTGRES_DB_POSEY="${{ vars.POSTGRES_DB_POSEY }}"
          POSTGRES_DSN="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:3333/$POSTGRES_DB_POSEY"
          
          kubectl create configmap database-urls \
            --from-literal=POSTGRES_DSN_POSEY="$POSTGRES_DSN" \
            --from-literal=HASURA_GRAPHQL_DATABASE_URL="$POSTGRES_DSN" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Qdrant ConfigMap
        run: |
          # Set variables with proper quoting
          QDRANT_URL="http://posey-qdrant:1111"
          QDRANT_HOST="http://posey-qdrant:1111"
          QDRANT_PORT="1111"
          
          kubectl create configmap qdrant-config \
            --from-literal=QDRANT_URL="$QDRANT_URL" \
            --from-literal=QDRANT_HOST="$QDRANT_HOST" \
            --from-literal=QDRANT_PORT="$QDRANT_PORT" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Services ConfigMap
        run: |
          # Set variables with proper quoting
          AGENTS_SERVICE_URL="http://posey-agents:5555"
          CRON_PORT="2222"
          VOYAGER_PORT="7777"
          VOYAGER_DOMAIN="${{ vars.VOYAGER_DOMAIN || 'posey.ai' }}"
          MCP_PORT="5050"
          SUPER_TOKENS_PORT="3567"
          AUTH_PORT="9999"
          
          kubectl create configmap services-config \
            --from-literal=AGENTS_SERVICE_URL="$AGENTS_SERVICE_URL" \
            --from-literal=CRON_PORT="$CRON_PORT" \
            --from-literal=VOYAGER_PORT="$VOYAGER_PORT" \
            --from-literal=VOYAGER_DOMAIN="$VOYAGER_DOMAIN" \
            --from-literal=MCP_PORT="$MCP_PORT" \
            --from-literal=SUPER_TOKENS_PORT="$SUPER_TOKENS_PORT" \
            --from-literal=AUTH_PORT="$AUTH_PORT" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create ML Models ConfigMap
        run: |
          # Set variables with proper quoting
          EMBEDDING_MODEL="${{ vars.EMBEDDING_MODEL || 'BAAI/bge-large-en-v1.5' }}"
          EMBEDDING_CACHE_DIR="/app/models"
          
          kubectl create configmap ml-models-config \
            --from-literal=EMBEDDING_MODEL="$EMBEDDING_MODEL" \
            --from-literal=EMBEDDING_CACHE_DIR="$EMBEDDING_CACHE_DIR" \
            --dry-run=client -o yaml | kubectl apply -f -

      #----------------------------------------------
      # Create Secrets for sensitive information
      #----------------------------------------------
      - name: Create Postgres Secret
        run: |
          # Escape possible special characters in the password
          POSTGRES_USER="${{ vars.POSTGRES_USER }}"
          POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          POSTGRES_DB="${{ vars.POSTGRES_DB }}"
          POSTGRES_DB_POSEY="${{ vars.POSTGRES_DB_POSEY }}"
          POSTGRES_DB_SUPERTOKENS="${{ vars.POSTGRES_DB_SUPERTOKENS || 'supertokens' }}"
          
          kubectl create secret generic postgres-credentials \
            --from-literal=POSTGRES_USER="$POSTGRES_USER" \
            --from-literal=POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
            --from-literal=POSTGRES_DB="$POSTGRES_DB" \
            --from-literal=POSTGRES_DB_POSEY="$POSTGRES_DB_POSEY" \
            --from-literal=POSTGRES_DB_SUPERTOKENS="$POSTGRES_DB_SUPERTOKENS" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Couchbase Secret
        run: |
          # Escape possible special characters in values
          COUCHBASE_USER="${{ vars.COUCHBASE_USER || 'admin' }}"
          COUCHBASE_PASSWORD="${{ secrets.COUCHBASE_PASSWORD || 'password' }}"
          COUCHBASE_BUCKET="${{ vars.COUCHBASE_BUCKET || 'posey' }}"
          COUCHBASE_URL="${{ vars.COUCHBASE_URL || 'couchbase://posey-couchbase' }}"
          COUCHBASE_SCOPE="${{ vars.COUCHBASE_SCOPE || '_default' }}"
          COUCHBASE_COLLECTION="${{ vars.COUCHBASE_COLLECTION || '_default' }}"
          
          kubectl create secret generic couchbase-credentials \
            --from-literal=COUCHBASE_USER="$COUCHBASE_USER" \
            --from-literal=COUCHBASE_PASSWORD="$COUCHBASE_PASSWORD" \
            --from-literal=COUCHBASE_BUCKET="$COUCHBASE_BUCKET" \
            --from-literal=COUCHBASE_URL="$COUCHBASE_URL" \
            --from-literal=COUCHBASE_SCOPE="$COUCHBASE_SCOPE" \
            --from-literal=COUCHBASE_COLLECTION="$COUCHBASE_COLLECTION" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Hasura Secret
        run: |
          # Escape possible special characters in values
          HASURA_ADMIN_SECRET="${{ secrets.HASURA_ADMIN_SECRET }}"
          POSTGRES_USER="${{ vars.POSTGRES_USER }}"
          POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          POSTGRES_HOST="${{ vars.POSTGRES_HOST || 'posey-postgres' }}"
          POSTGRES_DB_POSEY="${{ vars.POSTGRES_DB_POSEY }}"
          DB_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:3333/$POSTGRES_DB_POSEY"
          
          kubectl create secret generic hasura-credentials \
            --from-literal=HASURA_ADMIN_SECRET="$HASURA_ADMIN_SECRET" \
            --from-literal=HASURA_GRAPHQL_DATABASE_URL="$DB_URL" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Auth Secret
        run: |
          # Escape possible special characters in values
          JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          AUTH_BASE_URL="${{ vars.AUTH_BASE_URL || 'http://posey-auth:9999' }}"
          ALLOWED_ORIGINS="${{ vars.ALLOWED_ORIGINS || '*' }}"
          
          kubectl create secret generic auth-credentials \
            --from-literal=JWT_SECRET_KEY="$JWT_SECRET_KEY" \
            --from-literal=AUTH_BASE_URL="$AUTH_BASE_URL" \
            --from-literal=ALLOWED_ORIGINS="$ALLOWED_ORIGINS" \
            --dry-run=client -o yaml | kubectl apply -f -
