name: Deploy Data Services

on:
  push:
    branches:
      - main
      - develop
    # paths:
    #   - 'data/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-deploy:
    name: Build and Deploy Data Services
    runs-on: ubuntu-latest
    # Match the exact environment name as shown in GitHub UI
    environment: PRODUCTION
    
    env:
      DOCTL_VERSION: 1.92.1
      KUBE_CLUSTER_ID: ${{ secrets.DO_KUBERNETES_CLUSTER_ID }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_DB_POSEY: ${{ secrets.POSTGRES_DB_POSEY }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      COUCHBASE_USER: ${{ secrets.COUCHBASE_USER }}
      COUCHBASE_PASSWORD: ${{ secrets.COUCHBASE_PASSWORD }}
      COUCHBASE_BUCKET: ${{ secrets.COUCHBASE_BUCKET }}
      GRAPH_API_SECRET: ${{ secrets.GRAPH_API_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Secrets
        run: |
          echo "Debugging available secrets (will show only if exist, not values):"
          if [ -n "${{ secrets.POSTGRES_USER }}" ]; then echo "POSTGRES_USER: exists"; else echo "POSTGRES_USER: missing"; fi
          if [ -n "${{ secrets.POSTGRES_PASSWORD }}" ]; then echo "POSTGRES_PASSWORD: exists"; else echo "POSTGRES_PASSWORD: missing"; fi
          if [ -n "${{ secrets.POSTGRES_PORT }}" ]; then echo "POSTGRES_PORT: exists"; else echo "POSTGRES_PORT: missing"; fi
          if [ -n "${{ secrets.POSTGRES_DB_POSEY }}" ]; then echo "POSTGRES_DB_POSEY: exists"; else echo "POSTGRES_DB_POSEY: missing"; fi
          if [ -n "${{ secrets.POSTGRES_HOST }}" ]; then echo "POSTGRES_HOST: exists"; else echo "POSTGRES_HOST: missing"; fi
          
          # Check for alternative names seen in your variables screenshot
          if [ -n "${{ secrets.POSTGRES_DB }}" ]; then echo "POSTGRES_DB: exists"; else echo "POSTGRES_DB: missing"; fi
          if [ -n "${{ secrets.POSTGRES_USER }}" ]; then echo "POSTGRES_USER: exists"; else echo "POSTGRES_USER: missing"; fi
          
          # Debug GitHub context to understand available data
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Enable Corepack
        run: |
          corepack enable
          yarn --version
          
      - name: Install dependencies
        run: |
          cd data
          yarn install
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}
          
      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DO_KUBERNETES_CLUSTER_ID }}
        
      - name: Export environment variables directly
        run: |
          # Export variables directly to make them available to all steps
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $GITHUB_ENV
          echo "POSTGRES_DB_POSEY=${{ secrets.POSTGRES_DB_POSEY }}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> $GITHUB_ENV
          echo "COUCHBASE_USER=${{ secrets.COUCHBASE_USER }}" >> $GITHUB_ENV
          echo "COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}" >> $GITHUB_ENV
          echo "COUCHBASE_BUCKET=${{ secrets.COUCHBASE_BUCKET }}" >> $GITHUB_ENV
          echo "GRAPH_API_SECRET=${{ secrets.GRAPH_API_SECRET }}" >> $GITHUB_ENV
          
          # Use hardcoded values as fallbacks for testing if needed
          if [ -z "$POSTGRES_USER" ]; then
            echo "POSTGRES_USER=pocketprod" >> $GITHUB_ENV
          fi
          if [ -z "$POSTGRES_PORT" ]; then
            echo "POSTGRES_PORT=3333" >> $GITHUB_ENV
          fi
          if [ -z "$POSTGRES_DB_POSEY" ]; then
            echo "POSTGRES_DB_POSEY=poseybase" >> $GITHUB_ENV
          fi
          if [ -z "$POSTGRES_HOST" ]; then
            echo "POSTGRES_HOST=posey-postgres" >> $GITHUB_ENV
          fi
          
          # Set environment based on branch
          if [ "$GITHUB_REF_NAME" = "main" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          fi
        
      - name: Verify environment variables
        run: |
          echo "Checking environment variables after export:"
          echo "POSTGRES_USER: $POSTGRES_USER"
          echo "POSTGRES_PORT: $POSTGRES_PORT"
          echo "POSTGRES_DB_POSEY: $POSTGRES_DB_POSEY"
          echo "POSTGRES_HOST: $POSTGRES_HOST"
          echo "DEPLOY_ENV: $DEPLOY_ENV"
        
      - name: Build Docker images
        run: |
          cd data
          # Create .env file with exported variables
          cat > .env << EOF
          POSTGRES_USER=$POSTGRES_USER
          POSTGRES_PASSWORD=$POSTGRES_PASSWORD
          POSTGRES_PORT=$POSTGRES_PORT
          POSTGRES_DB_POSEY=$POSTGRES_DB_POSEY
          POSTGRES_HOST=$POSTGRES_HOST
          COUCHBASE_USER=$COUCHBASE_USER
          COUCHBASE_PASSWORD=$COUCHBASE_PASSWORD
          COUCHBASE_BUCKET=$COUCHBASE_BUCKET
          ENVIRONMENT=$DEPLOY_ENV
          DOCKER_REGISTRY=registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}
          EOF
          
          # Display .env file
          echo "Created .env file:"
          cat .env
          
          # Show the build.ts script content
          echo "Content of build script:"
          cat scripts/build.ts || echo "build.ts not found"
          
          # Run the build command
          yarn build || echo "Build failed, proceeding with manual build"
          
      - name: Check available Docker images
        run: |
          echo "Available Docker images:"
          docker images
          
          # Build the images manually
          cd data
          
          # Try using docker-compose directly
          docker-compose build
          
          # List images again
          echo "Docker images after docker-compose build:"
          docker images
          
      - name: Tag and push Docker images
        run: |
          # Get the short SHA of the commit
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Get all posey images from docker-compose
          POSEY_IMAGES=$(docker images | grep 'posey' | awk '{print $1}')
          
          if [ -z "$POSEY_IMAGES" ]; then
            echo "No posey images found to push"
            exit 1
          fi
          
          echo "Found posey images: $POSEY_IMAGES"
          
          # Tag and push all posey images
          for IMAGE in $POSEY_IMAGES; do
            echo "Tagging and pushing $IMAGE"
            
            # Tag with SHA and latest
            docker tag $IMAGE registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/$IMAGE:$SHORT_SHA
            docker tag $IMAGE registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/$IMAGE:latest
            
            # Push both tags
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/$IMAGE:$SHORT_SHA
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/$IMAGE:latest
          done
        
      - name: Deploy to Kubernetes
        run: |
          cd data
          # Create .env file for deployment
          cat > .env << EOF
          POSTGRES_USER=$POSTGRES_USER
          POSTGRES_PASSWORD=$POSTGRES_PASSWORD
          POSTGRES_PORT=$POSTGRES_PORT
          POSTGRES_DB_POSEY=$POSTGRES_DB_POSEY
          POSTGRES_HOST=$POSTGRES_HOST
          COUCHBASE_USER=$COUCHBASE_USER
          COUCHBASE_PASSWORD=$COUCHBASE_PASSWORD
          COUCHBASE_BUCKET=$COUCHBASE_BUCKET
          ENVIRONMENT=$DEPLOY_ENV
          DOCKER_REGISTRY=registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}
          EOF
          
          yarn deploy
        
      - name: Verify deployment
        run: |
          kubectl get pods -n posey
          
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Data services deployment successful"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Data services deployment failed" 