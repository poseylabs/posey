name: Deploy Data Services

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'data/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-deploy:
    name: Build and Deploy Data Services
    runs-on: ubuntu-latest
    
    env:
      DOCTL_VERSION: 1.92.1
      KUBE_CLUSTER_ID: ${{ secrets.DO_KUBERNETES_CLUSTER_ID }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_DB_POSEY: ${{ secrets.POSTGRES_DB_POSEY }}
      COUCHBASE_USER: ${{ secrets.COUCHBASE_USER }}
      COUCHBASE_PASSWORD: ${{ secrets.COUCHBASE_PASSWORD }}
      COUCHBASE_BUCKET: ${{ secrets.COUCHBASE_BUCKET }}
      GRAPH_API_SECRET: ${{ secrets.GRAPH_API_SECRET }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Enable Corepack
        run: |
          corepack enable
          yarn --version
          
      - name: Install dependencies
        run: |
          cd data
          yarn install
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}
          
      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DO_KUBERNETES_CLUSTER_ID }}
        
      - name: Build Docker images
        run: |
          cd data
          yarn build
        
      - name: Tag and push Docker images
        run: |
          # Get the short SHA of the commit
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Tag and push services
          for service in postgres couchbase vector.db graphql; do
            # Convert service name to valid image name
            IMAGE_NAME=$(echo $service | tr '.' '-')
            echo "Tagging and pushing $IMAGE_NAME"
            
            # Tag with SHA and latest
            docker tag posey-$IMAGE_NAME:latest registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:$SHORT_SHA
            docker tag posey-$IMAGE_NAME:latest registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:latest
            
            # Push both tags
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:$SHORT_SHA
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:latest
          done
        
      - name: Update .env file with deployment variables
        run: |
          cd data
          
          # Update environment variables for deployment
          cat > .env << EOF
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB_POSEY=${{ secrets.POSTGRES_DB_POSEY }}
          COUCHBASE_USER=${{ secrets.COUCHBASE_USER }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ secrets.COUCHBASE_BUCKET }}
          QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}
          GRAPH_API_SECRET=${{ secrets.GRAPH_API_SECRET }}
          ENVIRONMENT=${{ github.event.inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}
          DOCKER_REGISTRY=registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}
          EOF
        
      - name: Deploy to Kubernetes
        run: |
          cd data
          yarn deploy
        
      - name: Verify deployment
        run: |
          kubectl get pods -n posey
          
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Data services deployment successful"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Data services deployment failed" 