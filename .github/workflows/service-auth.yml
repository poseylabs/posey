name: Build Auth Service

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
    paths:
      - 'services/auth/**'
      - '.github/workflows/service-auth.yml'

env:
  DOCTL_VERSION: 1.92.1
  ENVIRONMENT: ${{ github.ref_name == 'main' && 'PRODUCTION' || 'STAGING' }}
  SERVICE: auth
  DOCKER_IMAGE_NAME: posey-auth
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  build-auth:
    name: Build Auth Service
    runs-on:
      group: posey-runners
    environment: PRODUCTION
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure network
        run: |
          echo "Setting DNS cache TTL to improve networking..."
          echo "options single-request-reopen" | sudo tee -a /etc/resolv.conf
          echo "options timeout:10" | sudo tee -a /etc/resolv.conf
          # Increase TCP performance
          sudo sysctl -w net.ipv4.tcp_slow_start_after_idle=0
          sudo sysctl -w net.ipv4.tcp_fastopen=3

      - name: Optimize original Dockerfile
        run: |
          # Check original Dockerfile
          echo "==== Original Dockerfile ===="
          cat services/${SERVICE}/Dockerfile
          
          # Create an optimized Dockerfile - safer than trying to edit in place
          cat > services/${SERVICE}/Dockerfile.new << EOF
          # Build stage
          FROM node:20-slim as builder

          # Install postgres client and other tools
          RUN apt-get update \\
            && apt-get install -y postgresql-client curl \\
            && rm -rf /var/lib/apt/lists/*

          # Enable Corepack for Yarn 4
          RUN corepack enable && corepack prepare yarn@4.5.1 --activate

          # Create service directory
          WORKDIR /app

          # Copy only auth service files to avoid workspace dependency issues
          COPY services/auth/ ./

          # Set up standalone mode to avoid workspace resolution
          RUN echo '{"name": "auth-service", "private": true, "packageManager": "yarn@4.5.1"}' > package.json
          
          # Install dependencies with optimized settings
          RUN yarn config set httpTimeout 600000 && \\
              yarn config set networkConcurrency 1 && \\
              yarn config set compressionLevel 0 && \\
              yarn config set enableGlobalCache false && \\
              yarn install --no-immutable --no-lockfile --network-timeout 600000 --verbose

          # Build the service
          RUN yarn build

          # Production image
          FROM node:20-slim

          # Install postgres client
          RUN apt-get update \\
            && apt-get install -y postgresql-client \\
            && rm -rf /var/lib/apt/lists/*

          # Copy built app from builder
          WORKDIR /app
          COPY --from=builder /app/dist ./dist
          COPY --from=builder /app/node_modules ./node_modules
          COPY --from=builder /app/package.json ./

          # Environment variables
          ENV NODE_ENV=production

          EXPOSE 9999
          CMD ["node", "dist/main.js"]
          EOF
          
          # Replace with optimized version
          mv services/${SERVICE}/Dockerfile.new services/${SERVICE}/Dockerfile
          
          echo "==== Optimized Dockerfile ===="
          cat services/${SERVICE}/Dockerfile
          
      - name: Install doctl
        run: |
          cd /tmp
          curl -sL --retry 5 --retry-delay 5 https://github.com/digitalocean/doctl/releases/download/v${{ env.DOCTL_VERSION }}/doctl-${{ env.DOCTL_VERSION }}-linux-arm64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin/
          doctl version
          doctl auth init -t ${{ secrets.DO_API_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: |
          doctl registry login --expiry-seconds 7200
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0
          
      - name: Docker Buildx Configuration
        run: |
          docker buildx create --name multiplatform-builder --driver docker-container --use --bootstrap
          docker buildx inspect
          
      - name: Build Auth Service
        timeout-minutes: 90
        run: |
          echo "Building ${SERVICE}..."
          
          docker buildx build \
            --platform linux/amd64 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:latest \
            --cache-from registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:${{ env.ENVIRONMENT }} \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:latest \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:${{ env.ENVIRONMENT }} \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:$(echo $GITHUB_SHA | cut -c1-7) \
            -f services/${SERVICE}/Dockerfile \
            --push \
            .
            
      - name: Push images to registry
        run: |
          echo "Pushing ${SERVICE} images to registry..."
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${SERVICE}:latest || true
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${SERVICE}:${{ env.ENVIRONMENT }} || true
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${SERVICE}:$(echo $GITHUB_SHA | cut -c1-7) || true
          
      - name: Verify push status
        run: |
          echo "Verifying image availability in registry..."
          doctl registry repository list-tags ${{ secrets.DO_REGISTRY_NAME }}/${SERVICE} --format Tag 