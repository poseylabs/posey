name: Build Auth Service

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
    paths:
      - 'services/auth/**'
      - '.github/workflows/service-auth.yml'

env:
  DOCTL_VERSION: 1.92.1
  ENVIRONMENT: ${{ github.ref_name == 'main' && 'PRODUCTION' || 'STAGING' }}
  SERVICE: auth
  DOCKER_IMAGE_NAME: posey-auth
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  build-auth:
    name: Build Auth Service
    runs-on:
      group: posey-runners
    environment: PRODUCTION
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Configure DNS and network
        run: |
          echo "Setting DNS cache TTL to improve networking..."
          echo "options single-request-reopen" | sudo tee -a /etc/resolv.conf
          echo "options timeout:10" | sudo tee -a /etc/resolv.conf
          # Increase TCP performance
          sudo sysctl -w net.ipv4.tcp_slow_start_after_idle=0
          sudo sysctl -w net.ipv4.tcp_fastopen=3

      - name: Enable Corepack and optimize Yarn
        run: |
          corepack enable
          corepack prepare yarn@4.5.1 --activate
          yarn --version
          # Configure Yarn for maximum performance
          yarn config set httpTimeout 300000
          yarn config set networkConcurrency 4
          yarn config set compressionLevel 0
          yarn config set enableGlobalCache true
          yarn config set nmMode hardlinks-local
          yarn config set enableImmutableInstalls false
          # Show all settings
          yarn config -v

      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .pnp.cjs
            .pnp.loader.mjs
            node_modules/.cache
            node_modules/.yarn-state.yml
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-

      - name: Create optimized Dockerfile
        run: |
          cat > services/${SERVICE}/Dockerfile.optimized << 'EOF'
          FROM node:20-slim AS builder

          # Install postgres client
          RUN apt-get update \
            && apt-get install -y postgresql-client \
            && rm -rf /var/lib/apt/lists/*

          # Enable Corepack for Yarn
          RUN corepack enable
          RUN corepack prepare yarn@4.5.1 --activate

          # Set up workdir
          WORKDIR /app

          # Optimize Yarn
          RUN echo '{"packageManager": "yarn@4.5.1"}' > /app/package.json.temp
          RUN if [ ! -f "package.json" ]; then mv package.json.temp package.json; else rm package.json.temp; fi

          # Copy only essential files for dependencies
          COPY package.json .yarnrc.yml ./
          COPY packages/core/package.json ./packages/core/
          COPY packages/ui/package.json ./packages/ui/
          COPY services/auth/package.json ./services/auth/

          # Create required directories
          RUN mkdir -p ./.yarn ./packages/core/src ./packages/ui/src ./services/auth/src

          # Optimized install 
          RUN yarn config set httpTimeout 300000 && \
              yarn config set networkConcurrency 4 && \
              yarn config set compressionLevel 0 && \
              yarn workspaces focus --production @posey/auth

          # Copy service source files
          COPY services/auth ./services/auth/
          COPY packages/core/src ./packages/core/src/
          COPY packages/ui/src ./packages/ui/src/

          # Build the application
          WORKDIR /app/services/auth
          RUN yarn build

          # Production image
          FROM node:20-slim

          # Install postgres client
          RUN apt-get update \
            && apt-get install -y postgresql-client \
            && rm -rf /var/lib/apt/lists/*

          # Copy built app from builder
          WORKDIR /app
          COPY --from=builder /app/services/auth/dist ./dist
          COPY --from=builder /app/services/auth/package.json ./
          COPY --from=builder /app/node_modules ./node_modules

          # Environment variables
          ENV NODE_ENV=production

          EXPOSE 9999
          CMD ["node", "dist/main.js"]
          EOF
          
      - name: Install doctl
        run: |
          cd /tmp
          curl -sL --retry 5 --retry-delay 5 https://github.com/digitalocean/doctl/releases/download/v${{ env.DOCTL_VERSION }}/doctl-${{ env.DOCTL_VERSION }}-linux-arm64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin/
          doctl version
          doctl auth init -t ${{ secrets.DO_API_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: |
          doctl registry login --expiry-seconds 7200
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0
          
      - name: Docker Buildx Configuration
        run: |
          docker buildx create --name multiplatform-builder --driver docker-container --use --bootstrap
          docker buildx inspect
          
      - name: Build Auth Service
        timeout-minutes: 90
        run: |
          echo "Building ${SERVICE}..."
          
          docker buildx build \
            --platform linux/amd64 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:latest \
            --cache-from registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:${{ env.ENVIRONMENT }} \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:latest \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:${{ env.ENVIRONMENT }} \
            -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${DOCKER_IMAGE_NAME:-$SERVICE}:$(echo $GITHUB_SHA | cut -c1-7) \
            -f services/${SERVICE}/Dockerfile.optimized \
            --push \
            .
            
      - name: Push images to registry
        run: |
          echo "Pushing ${SERVICE} images to registry..."
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${SERVICE}:latest || true
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${SERVICE}:${{ env.ENVIRONMENT }} || true
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${SERVICE}:$(echo $GITHUB_SHA | cut -c1-7) || true
          
      - name: Verify push status
        run: |
          echo "Verifying image availability in registry..."
          doctl registry repository list-tags ${{ secrets.DO_REGISTRY_NAME }}/${SERVICE} --format Tag 