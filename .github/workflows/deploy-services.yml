name: Deploy Services

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'services/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      service:
        description: 'Specific service to deploy (optional)'
        required: false
        type: string

jobs:
  build-and-deploy:
    name: Build and Deploy Services
    runs-on: ubuntu-latest-4-cores
    environment: ${{ github.event.inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}
    
    env:
      DOCTL_VERSION: 1.92.1
      KUBE_CLUSTER_ID: ${{ (github.event.inputs.environment == 'production' || github.ref_name == 'main') && secrets.DO_KUBERNETES_CLUSTER_ID || secrets.DO_KUBERNETES_CLUSTER_ID_STAGING }}
      SUPERTOKENS_API_KEY: ${{ secrets.SUPERTOKENS_API_KEY }}
      SUPERTOKENS_DASHBOARD_PASSWORD: ${{ secrets.SUPERTOKENS_DASHBOARD_PASSWORD }}
      GRAPH_API_SECRET: ${{ secrets.GRAPH_API_SECRET }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_DB_POSEY: ${{ secrets.POSTGRES_DB_POSEY }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST || 'posey-postgres' }}
      COUCHBASE_USER: ${{ secrets.COUCHBASE_USER }}
      COUCHBASE_PASSWORD: ${{ secrets.COUCHBASE_PASSWORD }}
      COUCHBASE_BUCKET: ${{ secrets.COUCHBASE_BUCKET }}
      ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Enable Corepack
        run: |
          corepack enable
          yarn --version

      - name: Install dependencies
        run: |
          cd services
          yarn install

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: |
          doctl registry login --expiry-seconds 3600
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ env.KUBE_CLUSTER_ID }}
        
      - name: Create .env file
        run: |
          cd services
          # Create .env file with required variables
          cat > .env << EOF
          # Environment
          ENVIRONMENT=${{ env.ENVIRONMENT }}
          DOCKER_REGISTRY=registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}
          
          # Database Connections
          POSTGRES_USER=${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
          POSTGRES_PORT=${{ env.POSTGRES_PORT }}
          POSTGRES_DB_POSEY=${{ env.POSTGRES_DB_POSEY }}
          POSTGRES_HOST=${{ env.POSTGRES_HOST }}
          COUCHBASE_USER=${{ env.COUCHBASE_USER }}
          COUCHBASE_PASSWORD=${{ env.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ env.COUCHBASE_BUCKET }}
          
          # Auth
          SUPERTOKENS_API_KEY=${{ env.SUPERTOKENS_API_KEY }}
          SUPERTOKENS_DASHBOARD_PASSWORD=${{ env.SUPERTOKENS_DASHBOARD_PASSWORD }}
          GRAPH_API_SECRET=${{ env.GRAPH_API_SECRET }}
          
          # Add any additional environment variables needed
          ${{ secrets.ADDITIONAL_ENV_VARS }}
          EOF
          
          echo "Created .env file for services deployment"

      - name: Free disk space
        run: |
          echo "Checking available disk space before cleanup:"
          df -h
          
          # Remove unnecessary large directories
          echo "Removing unnecessary large directories..."
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          # Clean Docker cache
          echo "Cleaning Docker cache..."
          docker system prune -af
          
          echo "Available disk space after cleanup:"
          df -h
        
      - name: Build Docker images
        run: |
          cd services
          if [[ -n "${{ github.event.inputs.service }}" ]]; then
            echo "Building specific service: ${{ github.event.inputs.service }}"
            yarn build:local -- --service ${{ github.event.inputs.service }}
          else
            echo "Building all services"
            yarn build:local
          fi
        
      - name: Tag and push Docker images
        run: |
          # Get the short SHA of the commit
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "Using commit SHA: ${SHORT_SHA}"
          
          cd services
          
          # Get all services images
          SERVICES_IMAGES=$(docker images | grep 'posey' | grep -v 'postgres\|couchbase\|qdrant\|vector' | awk '{print $1}')
          
          if [ -z "$SERVICES_IMAGES" ]; then
            echo "No service images found to push"
            docker images
            exit 1
          fi

          echo "Found service images: $SERVICES_IMAGES"
          
          # Refresh registry login just before pushing
          doctl registry login --expiry-seconds 3600
          
          # Tag and push all service images
          for IMAGE in $SERVICES_IMAGES; do
            if [[ -n "${{ github.event.inputs.service }}" && ! "$IMAGE" =~ "${{ github.event.inputs.service }}" ]]; then
              echo "Skipping $IMAGE (not the specified service)"
              continue
            fi
            
            echo "Tagging and pushing $IMAGE"

            # Extract the image name without registry prefix if present
            IMAGE_NAME=$(echo $IMAGE | sed 's|^.*/||')
            echo "Extracted image name: $IMAGE_NAME"
            
            # Use only the image name for tagging with registry from secrets
            docker tag $IMAGE registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:${SHORT_SHA}
            docker tag $IMAGE registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:${{ env.ENVIRONMENT }}
            docker tag $IMAGE registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:latest
            
            echo "Tagged images. Pushing to registry..."
            
            # Push tags
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:${SHORT_SHA}
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:${{ env.ENVIRONMENT }}
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/${IMAGE_NAME}:latest
          done
        
      - name: Deploy to Kubernetes
        run: |
          cd services
          
          # Set the namespace based on environment
          NAMESPACE="posey"
          if [ "${{ env.ENVIRONMENT }}" == "staging" ]; then
            NAMESPACE="posey-staging"
            # Create namespace if it doesn't exist
            kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          fi
          
          # Set namespace for deployment
          export KUBE_NAMESPACE=$NAMESPACE
          
          if [[ -n "${{ github.event.inputs.service }}" ]]; then
            echo "Deploying specific service: ${{ github.event.inputs.service }} to namespace $NAMESPACE"
            yarn deploy:local -- --service ${{ github.event.inputs.service }} ${{ env.ENVIRONMENT == 'staging' && '--staging' || '' }}
          else
            echo "Deploying all services to namespace $NAMESPACE"
            yarn deploy:local ${{ env.ENVIRONMENT == 'staging' && '--staging' || '' }}
          fi
        
      - name: Verify deployment
        run: |
          NAMESPACE="posey"
          if [ "${{ env.ENVIRONMENT }}" == "staging" ]; then
            NAMESPACE="posey-staging"
          fi
          
          echo "Checking pod status in namespace $NAMESPACE:"
          kubectl get pods -n $NAMESPACE -l part-of=posey-platform
          
      - name: Display service URLs
        if: success()
        run: |
          NAMESPACE="posey"
          if [ "${{ env.ENVIRONMENT }}" == "staging" ]; then
            NAMESPACE="posey-staging"
          fi
          
          echo "✅ Services deployed successfully to ${{ env.ENVIRONMENT }} environment"
          echo "Services are available at:"
          
          if [ "${{ env.ENVIRONMENT }}" == "production" ]; then
            echo "- Auth API: https://auth.posey.ai"
            echo "- MCP API: https://mcp.posey.ai"
            echo "- Voyager API: https://voyager.posey.ai"
            echo "- Agents API: https://agents.posey.ai"
          else
            echo "- Auth API: https://auth.staging.posey.ai"
            echo "- MCP API: https://mcp.staging.posey.ai"
            echo "- Voyager API: https://voyager.staging.posey.ai"
            echo "- Agents API: https://agents.staging.posey.ai"
          fi
          
          echo ""
          echo "You can check the status of your pods with:"
          echo "kubectl get pods -n $NAMESPACE -l part-of=posey-platform"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Services deployment to ${{ env.ENVIRONMENT }} failed" 