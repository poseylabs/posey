name: Deploy Data Services to Staging

on:
  push:
    branches:
      - develop
      - feature/*
    paths:
      - 'data/**'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'data/**'
  workflow_dispatch:

jobs:
  build-and-deploy-staging:
    name: Build and Deploy Data Services to Staging
    runs-on: ubuntu-latest
    
    env:
      DOCTL_VERSION: 1.92.1
      KUBE_CLUSTER_ID: ${{ secrets.DO_KUBERNETES_CLUSTER_ID }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_DB_POSEY: ${{ secrets.POSTGRES_DB_POSEY }}
      COUCHBASE_USER: ${{ secrets.COUCHBASE_USER }}
      COUCHBASE_PASSWORD: ${{ secrets.COUCHBASE_PASSWORD }}
      COUCHBASE_BUCKET: ${{ secrets.COUCHBASE_BUCKET }}
      GRAPH_API_SECRET: ${{ secrets.GRAPH_API_SECRET }}
      ENVIRONMENT: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'
          
      - name: Install dependencies
        run: |
          cd data
          yarn install
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}
          
      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DO_KUBERNETES_CLUSTER_ID_STAGING }}
        
      - name: Build Docker images
        run: |
          cd data
          yarn build
        
      - name: Tag and push Docker images
        run: |
          # Get the short SHA of the commit
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Add PR or branch identifier for staging
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IDENTIFIER="pr-${{ github.event.pull_request.number }}"
          else
            IDENTIFIER=$(echo ${{ github.ref_name }} | tr '/' '-')
          fi
          
          # Tag and push services
          for service in postgres couchbase vector.db graphql; do
            # Convert service name to valid image name
            IMAGE_NAME=$(echo $service | tr '.' '-')
            echo "Tagging and pushing $IMAGE_NAME for staging"
            
            # Tag with SHA, PR/branch identifier, and staging
            docker tag posey-$IMAGE_NAME:latest registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:$SHORT_SHA
            docker tag posey-$IMAGE_NAME:latest registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:$IDENTIFIER
            docker tag posey-$IMAGE_NAME:latest registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:staging
            
            # Push all tags
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:$SHORT_SHA
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:$IDENTIFIER
            docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/posey-$IMAGE_NAME:staging
          done
        
      - name: Update .env file with staging variables
        run: |
          cd data
          
          # Update environment variables for staging deployment
          cat > .env << EOF
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB_POSEY=${{ secrets.POSTGRES_DB_POSEY }}
          COUCHBASE_USER=${{ secrets.COUCHBASE_USER }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ secrets.COUCHBASE_BUCKET }}
          GRAPH_API_SECRET=${{ secrets.GRAPH_API_SECRET }}
          ENVIRONMENT=staging
          DOCKER_REGISTRY=registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}
          EOF
        
      - name: Deploy to Kubernetes staging namespace
        run: |
          cd data
          
          # Create or update staging namespace
          kubectl create namespace posey-staging --dry-run=client -o yaml | kubectl apply -f -
          
          # Override to use staging namespace
          export KUBE_NAMESPACE=posey-staging
          
          # Run deploy with staging flag
          yarn deploy -- --staging
        
      - name: Verify staging deployment
        run: |
          kubectl get pods -n posey-staging
          
      - name: Add deployment URL as PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const deploymentUrl = 'https://staging-${{ github.event.pull_request.number }}.posey.yourdomain.com';
            
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Data services deployed to staging!\n\nYou can access the deployment at: ${deploymentUrl}`
            });
           
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Data services deployment to staging successful"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Data services deployment to staging failed" 