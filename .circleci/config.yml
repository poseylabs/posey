version: 2.1

orbs:
  docker: circleci/docker@2.5.0

# Import individual service configurations
# Data services
import:
  # Data services
  - .circleci/data-postgres-config.yml
  - .circleci/data-couchbase-config.yml
  - .circleci/data-vector-db-config.yml
  # Application services
  - .circleci/service-auth-config.yml
  - .circleci/service-cron-config.yml
  - .circleci/service-voyager-config.yml
  - .circleci/service-mcp-config.yml
  - .circleci/service-supertokens-config.yml
  - .circleci/service-agents-config.yml

parameters:
  run-workflow:
    default: true
    type: boolean
  run-auth-workflow:
    type: boolean
    default: false
  run-cron-workflow:
    type: boolean
    default: false
  run-voyager-workflow:
    type: boolean
    default: false
  run-mcp-workflow:
    type: boolean
    default: false
  run-supertokens-workflow:
    type: boolean
    default: false
  run-agents-workflow:
    type: boolean
    default: false
  run-vector-db-workflow:
    type: boolean
    default: false
  run-postgres-workflow:
    type: boolean
    default: false
  run-couchbase-workflow:
    type: boolean
    default: false

executors:
  docker-builder:
    docker:
      - image: cimg/base:2024.03
    resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      YARN_VERBOSE: true
      YARN_ENABLE_PROGRESS_BARS: true
      YARN_LOG_LEVEL: info

commands:
  setup-doctl:
    description: "Install and configure doctl"
    steps:
      - run:
          name: Install doctl
          command: |
            cd /tmp
            curl -sL --retry 5 --retry-delay 5 https://github.com/digitalocean/doctl/releases/download/v1.92.1/doctl-1.92.1-linux-amd64.tar.gz | tar -xzv
            sudo mv doctl /usr/local/bin/
            doctl version
            doctl auth init -t ${DO_API_TOKEN}
      - run:
          name: Log in to DigitalOcean Container Registry
          command: |
            doctl registry login --expiry-seconds 7200

  setup-buildx:
    description: "Set up Docker Buildx"
    steps:
      - run:
          name: Set up Docker Buildx
          command: |
            docker buildx create --use --name=multiplatform-builder --driver=docker-container --driver-opt=network=host --buildkitd-flags="--allow-insecure-entitlement network.host" --bootstrap
            docker buildx inspect --bootstrap

  install-kubectl:
    description: "Install and configure kubectl"
    steps:
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

  setup-kubeconfig:
    description: "Set up kubeconfig for Digital Ocean"
    steps:
      - run:
          name: Set up kubeconfig
          command: |
            doctl kubernetes cluster kubeconfig save ${DO_K8S_CLUSTER_ID}
            kubectl config use-context do-sfo3-posey-cluster

jobs:
  build-auth-service:
    executor: docker-builder
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - run:
          name: Configure git
          command: |
            git config --global url."https://github.com/".insteadOf git@github.com:
            git config --global url."https://github.com/".insteadOf ssh://git@github.com/
      - run:
          name: Configure network
          command: |
            echo "Setting up network optimizations..."
            echo "options single-request-reopen" | sudo tee -a /etc/resolv.conf
            echo "options timeout:10" | sudo tee -a /etc/resolv.conf
            echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
            echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf
            # Increase TCP performance
            sudo sysctl -w net.ipv4.tcp_slow_start_after_idle=0
            sudo sysctl -w net.ipv4.tcp_fastopen=3
      - setup-doctl
      - setup-buildx
      - run:
          name: Pull existing images for cache
          command: |
            echo "Pulling existing images for caching..."
            docker pull registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:latest || echo "No latest image found"
            docker pull registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:buildcache || echo "No buildcache image found" 
            docker pull registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:PRODUCTION || echo "No PRODUCTION image found"
      - run:
          name: Build Auth Service
          no_output_timeout: 60m
          command: |
            echo "Building auth service..."
            
            # Create yarn logs directory
            mkdir -p yarn-logs
            
            # Try the build up to 3 times to handle network failures
            max_attempts=3
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Build attempt $attempt of $max_attempts"
              
              # Only build for amd64 to speed up build time
              set -o pipefail && DOCKER_BUILDKIT=1 docker buildx build \
                --platform linux/amd64 \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                --build-arg NODE_ENV=production \
                --build-arg BUILDKIT_MAX_PARALLELISM=4 \
                --build-arg YARN_ENABLE_TELEMETRY=false \
                --build-arg YARN_ENABLE_PROGRESS_BARS=true \
                --build-arg YARN_VERBOSE=true \
                --build-arg DEBUG="yarn*,pnp*" \
                --build-arg YARN_LOG_LEVEL=info \
                --build-arg YARN_COLORS=true \
                --progress=plain \
                --memory=12g \
                --cache-from type=registry,ref=registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:buildcache \
                --cache-from registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:latest \
                --cache-from registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:PRODUCTION \
                --cache-to type=registry,ref=registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:buildcache,mode=max \
                -t registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:latest \
                -t registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:PRODUCTION \
                -t registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-auth:$(echo $CIRCLE_SHA1 | cut -c1-7) \
                -f services/auth/Dockerfile \
                --push \
                . 2>&1 | tee yarn-logs/build-attempt-$attempt.log
                
              if [ ${PIPESTATUS[0]} -eq 0 ]; then
                echo "Build succeeded on attempt $attempt"
                cp yarn-logs/build-attempt-$attempt.log yarn-logs/build.log
                break
              else
                echo "Build failed on attempt $attempt"
                if [ $attempt -eq $max_attempts ]; then
                  echo "All build attempts failed"
                  cp yarn-logs/build-attempt-$attempt.log yarn-logs/build.log
                  exit 1
                fi
                attempt=$((attempt+1))
                echo "Waiting 60 seconds before next attempt..."
                sleep 60
              fi
            done
      - install-kubectl
      - setup-kubeconfig
      - run:
          name: Trigger ArgoCD sync for Auth
          command: |
            # Install argocd CLI if needed
            curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd
            sudo mv argocd /usr/local/bin/
            
            # Log in to ArgoCD (using token auth)
            argocd login ${ARGOCD_SERVER} --auth-token ${ARGOCD_TOKEN} --grpc-web
            
            # Trigger sync for the auth application
            argocd app sync posey-auth --force
            
            # Wait for sync to complete
            argocd app wait posey-auth --health --timeout 300
      - store_artifacts:
          path: yarn-logs
          destination: yarn-logs

workflows:
  version: 2
  auth-service-pipeline:
    when: << pipeline.parameters.run-auth-workflow >>
    jobs:
      - build-auth-service:
          context: 
            - posey-prod-core
            - posey-prod-data
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/
              
  # Include all other service workflows
  postgres-pipeline:
    when: << pipeline.parameters.run-postgres-workflow >>
    jobs:
      - build-postgres:
          context: 
            - posey-prod-core
            - posey-prod-data
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/
              
  couchbase-pipeline:
    when: << pipeline.parameters.run-couchbase-workflow >>
    jobs:
      - build-couchbase:
          context: 
            - posey-prod-core
            - posey-prod-data
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/
              
  vector-db-pipeline:
    when: << pipeline.parameters.run-vector-db-workflow >>
    jobs:
      - build-vector-db:
          context: 
            - posey-prod-core
            - posey-prod-data
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/ 