version: 2.1

description: "Orb for building and deploying the Postgres service"

# Use the common orb for shared executors and commands
orbs:
  common: posey/common@0.0.16

jobs:
  build-postgres:
    executor: common/docker-builder
    steps:
      - common/setup-common
      - run:
          name: Pull existing images for cache
          command: |
            echo "Pulling existing images for caching..."
            docker pull registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:latest || echo "No latest image found"
            docker pull registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:buildcache || echo "No buildcache image found" 
            docker pull registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:PRODUCTION || echo "No PRODUCTION image found"
      - run:
          name: Build Postgres Service
          no_output_timeout: 30m
          command: |
            echo "Building postgres service..."
            
            # Create logs directory
            mkdir -p build-logs
            
            # Try the build up to 3 times to handle network failures
            max_attempts=3
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Build attempt $attempt of $max_attempts"
              
              # Only build for amd64 to speed up build time
              set -o pipefail && DOCKER_BUILDKIT=1 docker buildx build \
                --platform linux/amd64 \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                --build-arg NODE_ENV=production \
                --progress=plain \
                --memory=8g \
                --cache-from type=registry,ref=registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:buildcache \
                --cache-from registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:latest \
                --cache-from registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:PRODUCTION \
                --cache-to type=registry,ref=registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:buildcache,mode=max \
                -t registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:latest \
                -t registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:PRODUCTION \
                -t registry.digitalocean.com/${DO_REGISTRY_NAME}/posey-postgres:$(echo $CIRCLE_SHA1 | cut -c1-7) \
                -f data/postgres/Dockerfile \
                --push \
                ./data/postgres 2>&1 | tee build-logs/build-attempt-$attempt.log
                
              if [ ${PIPESTATUS[0]} -eq 0 ]; then
                echo "Build succeeded on attempt $attempt"
                cp build-logs/build-attempt-$attempt.log build-logs/build.log
                break
              else
                echo "Build failed on attempt $attempt"
                if [ $attempt -eq $max_attempts ]; then
                  echo "All build attempts failed"
                  cp build-logs/build-attempt-$attempt.log build-logs/build.log
                  exit 1
                fi
                attempt=$((attempt+1))
                echo "Waiting 60 seconds before next attempt..."
                sleep 60
              fi
            done
      - common/install-kubectl
      - common/setup-kubeconfig
      - run:
          name: Trigger ArgoCD sync for Postgres
          shell: /bin/bash
          command: |
            set +e  # Explicitly disable exit on error
            set -o pipefail  # Keep pipefail enabled
            
            # Initial diagnostics - run these before anything else
            echo "=== Environment Diagnostics ==="
            echo "Current directory: $(pwd)"
            echo "Available disk space:"
            df -h
            echo "Temporary directory space:"
            df -h /tmp
            echo "User and permissions:"
            id
            ls -la /usr/local/bin
            
            # Create temp directory for downloads
            TEMP_DIR=$(mktemp -d)
            echo "Created temporary directory: ${TEMP_DIR}"
            echo "Temp directory permissions:"
            ls -la ${TEMP_DIR}
            cd ${TEMP_DIR}
            
            # Check ArgoCD variables
            if [ -z "${ARGOCD_SERVER}" ]; then
              echo "ERROR: ARGOCD_SERVER environment variable is not set"
              exit 1
            fi
            
            # Clean up ARGOCD_SERVER URL - strip any protocol and trailing slashes
            ARGOCD_SERVER=$(echo "${ARGOCD_SERVER}" | sed 's#^[^:]*://##' | sed 's#/*$##')
            echo "ARGOCD_SERVER is set to: ${ARGOCD_SERVER}"
            
            if [ -z "${ARGOCD_TOKEN}" ]; then
              echo "ERROR: ARGOCD_TOKEN environment variable is not set"
              exit 1
            fi
            echo "ARGOCD_TOKEN is set (length: ${#ARGOCD_TOKEN})"
            
            # Download attempt with full error capture
            echo "Attempting to download ArgoCD CLI..."
            {
              curl -v --retry 3 --retry-delay 5 -L -o argocd.download https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 2>&1
              CURL_EXIT_CODE=$?
              
              if [ $CURL_EXIT_CODE -ne 0 ]; then
                echo "Failed to download latest ArgoCD CLI (exit code: $CURL_EXIT_CODE)"
                echo "Trying specific version v2.8.4..."
                
                curl -v --retry 3 --retry-delay 5 -L -o argocd.download https://github.com/argoproj/argo-cd/releases/download/v2.8.4/argocd-linux-amd64 2>&1
                CURL_EXIT_CODE=$?
                
                if [ $CURL_EXIT_CODE -ne 0 ]; then
                  echo "Failed to download specific version (exit code: $CURL_EXIT_CODE)"
                  exit 1
                fi
              fi
            } | tee download.log
            
            if [ ! -f argocd.download ]; then
              echo "ERROR: argocd.download file does not exist after curl"
              echo "Contents of temp directory:"
              ls -la
              echo "Download log:"
              cat download.log
              exit 1
            fi
            
            echo "File downloaded successfully. Size and permissions:"
            ls -lh argocd.download
            
            echo "Making file executable..."
            chmod +x argocd.download || { echo "Failed to chmod +x argocd.download"; exit 1; }
            
            echo "Moving to /usr/local/bin..."
            sudo mv argocd.download /usr/local/bin/argocd || { echo "Failed to move argocd to /usr/local/bin"; exit 1; }
            
            echo "Verifying installation..."
            which argocd || { echo "argocd not found in PATH"; exit 1; }
            
            cd -
            
            echo "Testing ArgoCD CLI..."
            argocd version --client
            
            # Rest of the ArgoCD commands
            echo "Testing server connection..."
            curl -k -s "https://${ARGOCD_SERVER}/api/version" || echo "Server connection test failed"
            
            echo "Logging in to ArgoCD..."
            argocd login "${ARGOCD_SERVER}" --auth-token "${ARGOCD_TOKEN}" --insecure
            
            echo "Triggering sync..."
            argocd app sync posey-postgres --force
            
            echo "Waiting for sync to complete..."
            argocd app wait posey-postgres --health --timeout 300
      - store_artifacts:
          path: build-logs
          destination: build-logs 