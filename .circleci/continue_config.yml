version: 2.1

# Standard and local orbs
orbs:
  # Standard orbs from the registry
  docker: circleci/docker@2.5.0
  path-filtering: circleci/path-filtering@1.0.0
  cli: circleci/circleci-cli@0.1.9
  
  # Published orbs - all using production versioning
  common: posey/common@0.0.7           # Production version
  service-auth: posey/service-auth@0.0.1    # Production version
  service-cron: posey/service-cron@0.0.1    # Production version
  data-postgres: posey/data-postgres@0.0.1  # Production version
  data-couchbase: posey/data-couchbase@0.0.1 # Production version
  data-vector-db: posey/data-vector-db@0.0.1 # Production version
  service-mcp: posey/service-mcp@0.0.1      # Production version
  service-supertokens: posey/service-supertokens@0.0.1 # Production version
  service-voyager: posey/service-voyager@0.0.1 # Production version
  service-agents: posey/service-agents@0.0.1 # Production version

# Define the parameters that will be passed from the setup configuration
parameters:
  run-voyager-workflow:
    type: boolean
    default: false
  run-mcp-workflow:
    type: boolean
    default: false
  run-supertokens-workflow:
    type: boolean
    default: false
  run-agents-workflow:
    type: boolean
    default: false
  run-vector-db-workflow:
    type: boolean
    default: false
  run-postgres-workflow:
    type: boolean
    default: false
  run-couchbase-workflow:
    type: boolean
    default: false
  run-auth-service-workflow:
    description: "Run Auth Service workflow"
    type: boolean
    default: false
  run-cron-service-workflow:
    description: "Run Cron Service workflow"
    type: boolean
    default: false
  run-orb-publishing-workflow:
    description: "Run the workflow to publish orbs"
    type: boolean
    default: false
  orb-version-type:
    description: "Version type for orb publishing (patch, minor, major)"
    type: string
    default: "patch"

# Commands for orb publishing
commands:
  create-namespace-if-needed:
    description: "Create the namespace if it doesn't exist"
    parameters:
      namespace:
        type: string
        default: "posey"
    steps:
      - run:
          name: Check if namespace exists and create if needed
          command: |
            if [ -z "${CIRCLECI_API_TOKEN}" ]; then
              echo "Error: CIRCLECI_API_TOKEN environment variable is not set"
              exit 1
            fi
            
            # Export the token for CircleCI CLI
            export CIRCLE_TOKEN="${CIRCLECI_API_TOKEN}"
            
            if ! circleci namespace list | grep -q "^<< parameters.namespace >> "; then
              echo "Creating namespace: << parameters.namespace >>"
              circleci namespace create << parameters.namespace >> --org-id "${CIRCLE_ORGANIZATION_ID}"
            else
              echo "Namespace << parameters.namespace >> already exists"
            fi

  create-orb-if-needed:
    description: "Create an orb if it doesn't exist"
    parameters:
      namespace:
        type: string
        default: "posey"
      orb-name:
        type: string
    steps:
      - run:
          name: Check if orb exists and create if needed
          command: |
            # Export the token for CircleCI CLI
            export CIRCLE_TOKEN="${CIRCLECI_API_TOKEN}"
            
            if ! circleci orb list << parameters.namespace >> | grep -q "^<< parameters.namespace >>/<< parameters.orb-name >> "; then
              echo "Creating orb: << parameters.namespace >>/<< parameters.orb-name >>"
              circleci orb create << parameters.namespace >>/<< parameters.orb-name >>
            else
              echo "Orb << parameters.namespace >>/<< parameters.orb-name >> already exists"
            fi

  publish-orb:
    description: "Publish an orb from a file"
    parameters:
      namespace:
        type: string
        default: "posey"
      orb-name:
        type: string
      orb-file:
        type: string
      is-private:
        type: boolean
        default: false
      version-type:
        type: string
    steps:
      - run:
          name: Publish orb
          command: |
            # Export the token for CircleCI CLI
            export CIRCLE_TOKEN="${CIRCLECI_API_TOKEN}"
            
            # First publish as a dev version
            echo "Publishing dev version of << parameters.namespace >>/<< parameters.orb-name >>"
            PRIVATE_FLAG=""
            if [[ "<< parameters.is-private >>" == "true" ]]; then
              PRIVATE_FLAG="--private"
            fi
            
            DEV_VERSION="dev:$(date +%s)"
            circleci orb publish << parameters.orb-file >> << parameters.namespace >>/<< parameters.orb-name >>@$DEV_VERSION $PRIVATE_FLAG
            
            # Then promote to specified version type
            echo "Promoting << parameters.namespace >>/<< parameters.orb-name >> to << parameters.version-type >> version"
            circleci orb publish promote << parameters.namespace >>/<< parameters.orb-name >>@$DEV_VERSION << parameters.version-type >> $PRIVATE_FLAG

# Jobs for orb publishing
jobs:
  publish-common-orb:
    docker:
      - image: cimg/base:current
    parameters:
      version-type:
        type: string
        default: "patch"
    steps:
      - checkout
      - cli/install
      - create-namespace-if-needed
      - create-orb-if-needed:
          orb-name: common
      - publish-orb:
          orb-name: common
          orb-file: .circleci/orbs/common-orb.yml
          version-type: << parameters.version-type >>

  publish-service-orbs:
    docker:
      - image: cimg/base:current
    parameters:
      version-type:
        type: string
        default: "patch"
    steps:
      - checkout
      - cli/install
      - create-namespace-if-needed
      - run:
          name: Publish all service orbs
          command: |
            # Export the token for CircleCI CLI
            export CIRCLE_TOKEN="${CIRCLECI_API_TOKEN}"
            
            # Create and publish each service orb
            for ORB_FILE in .circleci/orbs/service-*-orb.yml; do
              ORB_BASENAME=$(basename "$ORB_FILE" .yml)
              ORB_NAME="${ORB_BASENAME%-orb}"
              
              echo "Creating and publishing $ORB_NAME"
              
              # Create orb if needed
              if ! circleci orb list posey | grep -q "^posey/$ORB_NAME "; then
                echo "Creating orb: posey/$ORB_NAME"
                circleci orb create posey/$ORB_NAME
              else
                echo "Orb posey/$ORB_NAME already exists"
              fi
              
              # Publish dev version
              DEV_VERSION="dev:$(date +%s)"
              circleci orb publish "$ORB_FILE" posey/$ORB_NAME@$DEV_VERSION
              
              # Promote to specified version type
              echo "Promoting $ORB_NAME orb to << parameters.version-type >> version"
              circleci orb publish promote posey/$ORB_NAME@$DEV_VERSION << parameters.version-type >>
            done

  publish-data-orbs:
    docker:
      - image: cimg/base:current
    parameters:
      version-type:
        type: string
        default: "patch"
    steps:
      - checkout
      - cli/install
      - create-namespace-if-needed
      - run:
          name: Publish all data orbs
          command: |
            # Export the token for CircleCI CLI
            export CIRCLE_TOKEN="${CIRCLECI_API_TOKEN}"
            
            # Create and publish each data orb
            for ORB_FILE in .circleci/orbs/data-*-orb.yml; do
              ORB_BASENAME=$(basename "$ORB_FILE" .yml)
              ORB_NAME="${ORB_BASENAME%-orb}"
              
              echo "Creating and publishing $ORB_NAME"
              
              # Create orb if needed
              if ! circleci orb list posey | grep -q "^posey/$ORB_NAME "; then
                echo "Creating orb: posey/$ORB_NAME"
                circleci orb create posey/$ORB_NAME
              else
                echo "Orb posey/$ORB_NAME already exists"
              fi
              
              # Publish dev version
              DEV_VERSION="dev:$(date +%s)"
              circleci orb publish "$ORB_FILE" posey/$ORB_NAME@$DEV_VERSION
              
              # Promote to specified version type
              echo "Promoting $ORB_NAME orb to << parameters.version-type >> version"
              circleci orb publish promote posey/$ORB_NAME@$DEV_VERSION << parameters.version-type >>
            done

workflows:
  version: 2

  # Orb Publishing workflow
  publish-orbs:
    when: << pipeline.parameters.run-orb-publishing-workflow >>
    jobs:
      - publish-common-orb:
          context:
            - posey-prod-core
          version-type: << pipeline.parameters.orb-version-type >>
      - publish-service-orbs:
          requires:
            - publish-common-orb
          context:
            - posey-prod-core
          version-type: << pipeline.parameters.orb-version-type >>
      - publish-data-orbs:
          requires:
            - publish-common-orb
          context:
            - posey-prod-core
          version-type: << pipeline.parameters.orb-version-type >>

  # Auth Service workflow
  auth-service:
    when: << pipeline.parameters.run-auth-service-workflow >>
    jobs:
      - service-auth/build-auth-service:
          context:
            - posey-prod-core
            - posey-prod-services
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # Cron Service workflow
  cron-service:
    when: << pipeline.parameters.run-cron-service-workflow >>
    jobs:
      - service-cron/build-cron-service:
          context:
            - posey-prod-core
            - posey-prod-services
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # MCP Service workflow
  mcp-service:
    when: << pipeline.parameters.run-mcp-workflow >>
    jobs:
      - service-mcp/build-mcp-service:
          context:
            - posey-prod-core
            - posey-prod-services
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # SuperTokens Service workflow
  supertokens-service:
    when: << pipeline.parameters.run-supertokens-workflow >>
    jobs:
      - service-supertokens/build-supertokens-service:
          context:
            - posey-prod-core
            - posey-prod-services
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # Voyager Service workflow
  voyager-service:
    when: << pipeline.parameters.run-voyager-workflow >>
    jobs:
      - service-voyager/build-voyager-service:
          context:
            - posey-prod-core
            - posey-prod-services
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # Agents Service workflow
  agents-service:
    when: << pipeline.parameters.run-agents-workflow >>
    jobs:
      - service-agents/build-agents-service:
          context:
            - posey-prod-core
            - posey-prod-services
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # Postgres workflow
  postgres:
    when: << pipeline.parameters.run-postgres-workflow >>
    jobs:
      - data-postgres/build-postgres:
          context:
            - posey-prod-core
            - posey-prod-data
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # Couchbase workflow
  couchbase:
    when: << pipeline.parameters.run-couchbase-workflow >>
    jobs:
      - data-couchbase/build-couchbase:
          context:
            - posey-prod-core
            - posey-prod-data
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # Vector DB workflow
  vector-db:
    when: << pipeline.parameters.run-vector-db-workflow >>
    jobs:
      - data-vector-db/build-vector-db:
          context:
            - posey-prod-core
            - posey-prod-data
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

  # Orb Publishing workflow
  orb-publishing:
    when: << pipeline.parameters.run-orb-publishing-workflow >>
    jobs:
      - publish-common-orb:
          context: 
            - posey-cicd
            - posey-prod-core
          filters:
            tags:
              only: /.*/ # this ensures that the job runs for all tags
            branches:
              only: main
          version-type: << pipeline.parameters.orb-version-type >>
      - publish-service-orbs:
          context: 
            - posey-cicd
            - posey-prod-core
          requires:
            - publish-common-orb
          filters:
            tags:
              only: /.*/ # this ensures that the job runs for all tags
            branches:
              only: main
          version-type: << pipeline.parameters.orb-version-type >>
      - publish-data-orbs:
          context: 
            - posey-cicd
            - posey-prod-core
          requires:
            - publish-service-orbs
          filters:
            tags:
              only: /.*/ # this ensures that the job runs for all tags
            branches:
              only: main
          version-type: << pipeline.parameters.orb-version-type >> 