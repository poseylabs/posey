"""Synchronize models with existing schema v4

Revision ID: 66a33d61a3f0
Revises: d34fc03e4e3d
Create Date: 2025-04-13 00:26:42.450423

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '66a33d61a3f0'
down_revision: Union[str, None] = 'd34fc03e4e3d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('minion_llm_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('config_key', sa.String(), nullable=False),
    sa.Column('llm_model_id', sa.UUID(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('top_p', sa.Float(), nullable=True),
    sa.Column('frequency_penalty', sa.Float(), nullable=True),
    sa.Column('presence_penalty', sa.Float(), nullable=True),
    sa.Column('additional_settings', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['llm_model_id'], ['llm_models.id'], name=op.f('fk_minion_llm_configs_llm_model_id_llm_models')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_minion_llm_configs'))
    )
    op.create_index(op.f('ix_minion_llm_configs_config_key'), 'minion_llm_configs', ['config_key'], unique=True)
    op.drop_table('schema_migrations')
    op.drop_table('invitecodes')
    op.alter_column('agent_feedback', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_agent_feedback_created_at', table_name='agent_feedback')
    op.create_index('idx_agent_feedback_created_at', 'agent_feedback', ['created_at'], unique=False)
    op.create_foreign_key('agent_feedback_agent_id_fkey', 'agent_feedback', 'agents', ['agent_id'], ['id'])
    op.drop_column('agents', 'is_active')
    op.alter_column('calendar_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_events', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'status',
               existing_type=postgresql.ENUM('todo', 'in_progress', 'blocked', 'completed', 'cancelled', 'deferred', name='user_task_status'),
               nullable=False,
               existing_server_default=sa.text("'todo'::user_task_status"))
    op.alter_column('calendar_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               nullable=False,
               existing_server_default=sa.text("'medium'::task_priority"))
    op.alter_column('calendar_tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('conversation_messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('conversations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('unique_conversation_project', 'conversations', type_='unique')
    op.alter_column('event_attendees', 'response_status',
               existing_type=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("'pending'::text"))
    op.alter_column('event_attendees', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_attendees', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('fk_project', 'file_relationships', type_='foreignkey')
    op.drop_constraint('fk_conversation', 'file_relationships', type_='foreignkey')
    op.drop_constraint('fk_research_session', 'file_relationships', type_='foreignkey')
    op.alter_column('integration_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('integration_configs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('integration_configs_integration_type_key', 'integration_configs', type_='unique')
    op.create_unique_constraint(op.f('uq_integration_configs_integration_type'), 'integration_configs', ['integration_type'])
    op.alter_column('integration_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_integration_logs_created_at', table_name='integration_logs')
    op.create_index('idx_integration_logs_created_at', 'integration_logs', ['created_at'], unique=False)
    op.alter_column('invite_codes', 'code',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='The unique invite code string.',
               existing_nullable=False)
    op.alter_column('invite_codes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Timestamp when the invite code was created.',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_table_comment(
        'invite_codes',
        existing_comment='Stores single-use invite codes for user registration.',
        schema=None
    )
    op.alter_column('llm_models', 'provider_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('llm_models', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_models', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_llm_models_name'), 'llm_models', ['name'], unique=False)
    op.alter_column('llm_providers', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('llm_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('media_generation_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('memory_vectors', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_foreign_key('memory_vectors_agent_id_fkey', 'memory_vectors', 'agents', ['agent_id'], ['id'])
    op.alter_column('product_ideas', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=False,
               existing_server_default=sa.text("'new'::research_status"))
    op.alter_column('product_ideas', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_ideas', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.add_column('projects', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('projects', 'status',
               existing_type=postgresql.ENUM('new', 'planning', 'in_progress', 'active', 'paused', 'stale', 'postponed', 'completed', 'abandoned', 'archived', name='project_status'),
               nullable=False,
               existing_server_default=sa.text("'active'::project_status"))
    op.alter_column('projects', 'focus',
               existing_type=postgresql.ENUM('DEFAULT', 'VISUAL_MEDIA', 'AUDIO_MEDIA', 'CODE', 'RESEARCH', 'PLANNING', 'WRITING', 'EDUCATION', 'DATA_ANALYSIS', name='project_focus'),
               nullable=False,
               existing_server_default=sa.text("'DEFAULT'::project_focus"))
    op.alter_column('projects', 'start_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_interactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_references', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=False,
               existing_server_default=sa.text("'new'::research_status"))
    op.alter_column('research_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_images', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_images', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_messages', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_songs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_songs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_videos', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_videos', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('system_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('task_dependencies', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('users', 'deleted_at')
    op.alter_column('user_tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('task_dependencies', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('system_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_videos', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_videos', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_songs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_songs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_messages', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_images', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('saved_images', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=True,
               existing_server_default=sa.text("'new'::research_status"))
    op.alter_column('research_references', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_interactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'start_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'focus',
               existing_type=postgresql.ENUM('DEFAULT', 'VISUAL_MEDIA', 'AUDIO_MEDIA', 'CODE', 'RESEARCH', 'PLANNING', 'WRITING', 'EDUCATION', 'DATA_ANALYSIS', name='project_focus'),
               nullable=True,
               existing_server_default=sa.text("'DEFAULT'::project_focus"))
    op.alter_column('projects', 'status',
               existing_type=postgresql.ENUM('new', 'planning', 'in_progress', 'active', 'paused', 'stale', 'postponed', 'completed', 'abandoned', 'archived', name='project_status'),
               nullable=True,
               existing_server_default=sa.text("'active'::project_status"))
    op.drop_column('projects', 'deleted_at')
    op.alter_column('project_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_ideas', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_ideas', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_ideas', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=True,
               existing_server_default=sa.text("'new'::research_status"))
    op.drop_constraint('memory_vectors_agent_id_fkey', 'memory_vectors', type_='foreignkey')
    op.alter_column('memory_vectors', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('media_generation_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_providers', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_index(op.f('ix_llm_models_name'), table_name='llm_models')
    op.alter_column('llm_models', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_models', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_models', 'provider_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_table_comment(
        'invite_codes',
        'Stores single-use invite codes for user registration.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('invite_codes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Timestamp when the invite code was created.',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('invite_codes', 'code',
               existing_type=sa.VARCHAR(length=255),
               comment='The unique invite code string.',
               existing_nullable=False)
    op.drop_index('idx_integration_logs_created_at', table_name='integration_logs')
    op.create_index('idx_integration_logs_created_at', 'integration_logs', [sa.literal_column('created_at DESC')], unique=False)
    op.alter_column('integration_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('uq_integration_configs_integration_type'), 'integration_configs', type_='unique')
    op.create_unique_constraint('integration_configs_integration_type_key', 'integration_configs', ['integration_type'])
    op.alter_column('integration_configs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('integration_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_foreign_key('fk_research_session', 'file_relationships', 'research_sessions', ['related_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.create_foreign_key('fk_conversation', 'file_relationships', 'conversations', ['related_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.create_foreign_key('fk_project', 'file_relationships', 'projects', ['related_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.alter_column('event_attendees', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_attendees', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_attendees', 'response_status',
               existing_type=sa.TEXT(),
               nullable=True,
               existing_server_default=sa.text("'pending'::text"))
    op.create_unique_constraint('unique_conversation_project', 'conversations', ['id', 'project_id'])
    op.alter_column('conversations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('conversation_messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               nullable=True,
               existing_server_default=sa.text("'medium'::task_priority"))
    op.alter_column('calendar_tasks', 'status',
               existing_type=postgresql.ENUM('todo', 'in_progress', 'blocked', 'completed', 'cancelled', 'deferred', name='user_task_status'),
               nullable=True,
               existing_server_default=sa.text("'todo'::user_task_status"))
    op.alter_column('calendar_events', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.add_column('agents', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_constraint('agent_feedback_agent_id_fkey', 'agent_feedback', type_='foreignkey')
    op.drop_index('idx_agent_feedback_created_at', table_name='agent_feedback')
    op.create_index('idx_agent_feedback_created_at', 'agent_feedback', [sa.literal_column('created_at DESC')], unique=False)
    op.alter_column('agent_feedback', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_table('invitecodes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='invitecodes_pkey')
    )
    op.create_table('schema_migrations',
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('version', name='schema_migrations_pkey')
    )
    op.drop_index(op.f('ix_minion_llm_configs_config_key'), table_name='minion_llm_configs')
    op.drop_table('minion_llm_configs')
    # ### end Alembic commands ###
