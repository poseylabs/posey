"""Synchronize models with existing schema v3

Revision ID: abe47f79c330
Revises: 07043b94667f
Create Date: 2025-04-13 00:11:51.425345

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'abe47f79c330'
down_revision: Union[str, None] = '07043b94667f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('invite_codes',
    sa.Column('code', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('char_length(code) > 0', name=op.f('ck_invite_codes_code_length_check')),
    sa.PrimaryKeyConstraint('code', name=op.f('pk_invite_codes'))
    )
    op.create_table('minion_llm_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('config_key', sa.String(), nullable=False),
    sa.Column('llm_model_id', sa.UUID(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('top_p', sa.Float(), nullable=True),
    sa.Column('frequency_penalty', sa.Float(), nullable=True),
    sa.Column('presence_penalty', sa.Float(), nullable=True),
    sa.Column('additional_settings', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['llm_model_id'], ['llm_models.id'], name=op.f('fk_minion_llm_configs_llm_model_id_llm_models')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_minion_llm_configs'))
    )
    op.create_index(op.f('ix_minion_llm_configs_config_key'), 'minion_llm_configs', ['config_key'], unique=True)
    op.drop_table('schema_migrations')
    op.drop_table('invite_codes')
    op.drop_table('invitecodes')
    op.drop_index('idx_agent_feedback_agent_id', table_name='agent_feedback')
    op.drop_index('idx_agent_feedback_created_at', table_name='agent_feedback')
    op.drop_index('idx_agent_feedback_type', table_name='agent_feedback')
    op.drop_index('idx_agents_created_by', table_name='agents')
    op.drop_constraint('agents_created_by_fkey', 'agents', type_='foreignkey')
    op.drop_column('agents', 'error_count')
    op.drop_column('agents', 'last_error')
    op.drop_column('agents', 'created_by')
    op.drop_column('agents', 'is_active')
    op.drop_column('agents', 'last_active')
    op.alter_column('calendar_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_events', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'status',
               existing_type=postgresql.ENUM('todo', 'in_progress', 'blocked', 'completed', 'cancelled', 'deferred', name='user_task_status'),
               nullable=False,
               existing_server_default=sa.text("'todo'::user_task_status"))
    op.alter_column('calendar_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               nullable=False,
               existing_server_default=sa.text("'medium'::task_priority"))
    op.alter_column('calendar_tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_calendar_tasks_assigned', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_due_date', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_parent', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_priority', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_project', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_status', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_tags', table_name='calendar_tasks', postgresql_using='gin')
    op.drop_index('idx_calendar_tasks_user', table_name='calendar_tasks')
    op.drop_index('idx_conversation_messages_conversation_id', table_name='conversation_messages')
    op.drop_column('conversation_messages', 'sender')
    op.drop_column('conversation_messages', 'type')
    op.drop_index('idx_conversations_archived', table_name='conversations')
    op.drop_index('idx_conversations_project', table_name='conversations')
    op.drop_index('idx_conversations_user_id', table_name='conversations')
    op.drop_constraint('unique_conversation_project', 'conversations', type_='unique')
    op.drop_column('conversations', 'last_activity')
    op.drop_column('conversations', 'archive_reason')
    op.drop_column('conversations', 'is_archived')
    op.alter_column('event_attendees', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_attendees', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('event_attendees_event_id_user_id_key', 'event_attendees', type_='unique')
    op.drop_index('idx_event_attendees_event', table_name='event_attendees')
    op.drop_index('idx_event_attendees_status', table_name='event_attendees')
    op.drop_index('idx_event_attendees_user', table_name='event_attendees')
    op.create_unique_constraint('uq_event_attendees_unique', 'event_attendees', ['event_id', 'user_id'])
    op.drop_constraint('file_relationships_file_id_related_type_related_id_key', 'file_relationships', type_='unique')
    op.drop_index('idx_file_relationships_context', table_name='file_relationships')
    op.drop_index('idx_file_relationships_file', table_name='file_relationships')
    op.drop_index('idx_file_relationships_related', table_name='file_relationships')
    op.create_unique_constraint('uq_file_relationships_unique', 'file_relationships', ['file_id', 'related_type', 'related_id'])
    op.drop_constraint('fk_project', 'file_relationships', type_='foreignkey')
    op.drop_constraint('fk_conversation', 'file_relationships', type_='foreignkey')
    op.drop_constraint('fk_research_session', 'file_relationships', type_='foreignkey')
    op.drop_constraint('file_versions_original_file_id_version_number_key', 'file_versions', type_='unique')
    op.drop_index('idx_file_versions_original', table_name='file_versions')
    op.create_unique_constraint('uq_file_versions_original_version', 'file_versions', ['original_file_id', 'version_number'])
    op.drop_index('idx_integration_permissions', table_name='integration_configs', postgresql_using='gin')
    op.drop_constraint('integration_configs_integration_type_key', 'integration_configs', type_='unique')
    op.create_unique_constraint(op.f('uq_integration_configs_integration_type'), 'integration_configs', ['integration_type'])
    op.drop_index('idx_integration_logs_created_at', table_name='integration_logs')
    op.drop_index('idx_integration_logs_status', table_name='integration_logs')
    op.drop_index('idx_integration_logs_type', table_name='integration_logs')
    op.alter_column('llm_models', 'provider_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_constraint('llm_models_provider_id_model_id_key', 'llm_models', type_='unique')
    op.create_index(op.f('ix_llm_models_name'), 'llm_models', ['name'], unique=False)
    op.create_unique_constraint('uq_llm_models_provider_model', 'llm_models', ['provider_id', 'model_id'])
    op.alter_column('llm_providers', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.drop_constraint('llm_providers_name_key', 'llm_providers', type_='unique')
    op.create_index(op.f('ix_llm_providers_name'), 'llm_providers', ['name'], unique=True)
    op.drop_index('idx_media_history_agent', table_name='media_generation_history')
    op.drop_index('idx_media_history_type', table_name='media_generation_history')
    op.drop_index('idx_media_history_user', table_name='media_generation_history')
    op.alter_column('memory_vectors', 'memory_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index('idx_memory_agent', table_name='memory_vectors')
    op.drop_index('idx_memory_categories', table_name='memory_vectors', postgresql_using='gin')
    op.drop_index('idx_memory_temporal', table_name='memory_vectors')
    op.drop_index('idx_memory_type', table_name='memory_vectors')
    op.alter_column('product_ideas', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=False,
               existing_server_default=sa.text("'new'::research_status"))
    op.alter_column('product_ideas', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_ideas', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_product_ideas_category', table_name='product_ideas')
    op.drop_index('idx_product_ideas_status', table_name='product_ideas')
    op.drop_index('idx_product_ideas_task', table_name='product_ideas')
    op.drop_index('idx_product_ideas_user', table_name='product_ideas')
    op.alter_column('project_collaborators', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_project_collaborators_project', table_name='project_collaborators')
    op.drop_index('idx_project_collaborators_user', table_name='project_collaborators')
    op.alter_column('project_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_project_tags_project', table_name='project_tags')
    op.drop_index('idx_project_tags_tag', table_name='project_tags')
    op.drop_constraint('fk_system_tag', 'project_tags', type_='foreignkey')
    op.drop_constraint('fk_user_tag', 'project_tags', type_='foreignkey')
    op.add_column('projects', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('projects', 'status',
               existing_type=postgresql.ENUM('new', 'planning', 'in_progress', 'active', 'paused', 'stale', 'postponed', 'completed', 'abandoned', 'archived', name='project_status'),
               nullable=False,
               existing_server_default=sa.text("'active'::project_status"))
    op.alter_column('projects', 'focus',
               existing_type=postgresql.ENUM('DEFAULT', 'VISUAL_MEDIA', 'AUDIO_MEDIA', 'CODE', 'RESEARCH', 'PLANNING', 'WRITING', 'EDUCATION', 'DATA_ANALYSIS', name='project_focus'),
               nullable=False,
               existing_server_default=sa.text("'DEFAULT'::project_focus"))
    op.alter_column('projects', 'start_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'budget',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_projects_focus', table_name='projects')
    op.drop_index('idx_projects_status', table_name='projects')
    op.drop_index('idx_projects_user', table_name='projects')
    op.drop_constraint('projects_user_id_title_key', 'projects', type_='unique')
    op.create_unique_constraint('uq_projects_user_title', 'projects', ['user_id', 'title'])
    op.alter_column('research_findings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_research_findings_categories', table_name='research_findings', postgresql_using='gin')
    op.drop_index('idx_research_findings_project', table_name='research_findings')
    op.drop_index('idx_research_findings_session', table_name='research_findings')
    op.drop_index('idx_research_findings_tags', table_name='research_findings', postgresql_using='gin')
    op.drop_index('idx_research_findings_type', table_name='research_findings')
    op.alter_column('research_interactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_research_interactions_finding', table_name='research_interactions')
    op.drop_index('idx_research_interactions_type', table_name='research_interactions')
    op.drop_index('idx_research_interactions_user', table_name='research_interactions')
    op.add_column('research_references', sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('research_references', 'title',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('research_references', 'url',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('research_references', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_research_references_finding', table_name='research_references')
    op.drop_index('idx_research_references_type', table_name='research_references')
    op.alter_column('research_sessions', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=False,
               existing_server_default=sa.text("'new'::research_status"))
    op.alter_column('research_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_research_sessions_project', table_name='research_sessions')
    op.drop_index('idx_research_sessions_status', table_name='research_sessions')
    op.drop_index('idx_research_sessions_task', table_name='research_sessions')
    op.drop_index('idx_research_sessions_user', table_name='research_sessions')
    op.drop_index('idx_saved_images_user', table_name='saved_images')
    op.drop_index('idx_saved_messages_user', table_name='saved_messages')
    op.drop_constraint('saved_messages_message_id_key', 'saved_messages', type_='unique')
    op.drop_index('idx_saved_songs_user', table_name='saved_songs')
    op.drop_index('idx_saved_videos_user', table_name='saved_videos')
    op.drop_index('idx_sessions_expires', table_name='sessions')
    op.drop_index('idx_sessions_token', table_name='sessions')
    op.drop_index('idx_sessions_user', table_name='sessions')
    op.alter_column('system_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('system_tags_name_key', 'system_tags', type_='unique')
    op.create_unique_constraint('uq_system_tags_name', 'system_tags', ['name'])
    op.alter_column('task_dependencies', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_task_dependencies_depends', table_name='task_dependencies')
    op.drop_index('idx_task_dependencies_task', table_name='task_dependencies')
    op.drop_constraint('task_dependencies_task_id_depends_on_task_id_key', 'task_dependencies', type_='unique')
    op.create_unique_constraint('uq_task_dependencies_unique', 'task_dependencies', ['task_id', 'depends_on_task_id'])
    op.drop_index('idx_user_files_agent', table_name='user_files')
    op.drop_index('idx_user_files_source', table_name='user_files')
    op.drop_index('idx_user_files_tags', table_name='user_files', postgresql_using='gin')
    op.drop_index('idx_user_files_task', table_name='user_files')
    op.drop_index('idx_user_files_user', table_name='user_files')
    op.drop_constraint('user_files_user_id_storage_key_key', 'user_files', type_='unique')
    op.create_unique_constraint('uq_user_files_user_storage', 'user_files', ['user_id', 'storage_key'])
    op.alter_column('user_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_user_tags_user', table_name='user_tags')
    op.drop_constraint('user_tags_user_id_name_key', 'user_tags', type_='unique')
    op.create_unique_constraint('uq_user_tags_user_name', 'user_tags', ['user_id', 'name'])
    op.add_column('users', sa.Column('hashed_password', sa.String(), nullable=False))
    op.add_column('users', sa.Column('permissions', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'permissions')
    op.drop_column('users', 'hashed_password')
    op.drop_constraint('uq_user_tags_user_name', 'user_tags', type_='unique')
    op.create_unique_constraint('user_tags_user_id_name_key', 'user_tags', ['user_id', 'name'])
    op.create_index('idx_user_tags_user', 'user_tags', ['user_id'], unique=False)
    op.alter_column('user_tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('uq_user_files_user_storage', 'user_files', type_='unique')
    op.create_unique_constraint('user_files_user_id_storage_key_key', 'user_files', ['user_id', 'storage_key'])
    op.create_index('idx_user_files_user', 'user_files', ['user_id'], unique=False)
    op.create_index('idx_user_files_task', 'user_files', ['source_task_id'], unique=False)
    op.create_index('idx_user_files_tags', 'user_files', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_user_files_source', 'user_files', ['source'], unique=False)
    op.create_index('idx_user_files_agent', 'user_files', ['source_agent_id'], unique=False)
    op.drop_constraint('uq_task_dependencies_unique', 'task_dependencies', type_='unique')
    op.create_unique_constraint('task_dependencies_task_id_depends_on_task_id_key', 'task_dependencies', ['task_id', 'depends_on_task_id'])
    op.create_index('idx_task_dependencies_task', 'task_dependencies', ['task_id'], unique=False)
    op.create_index('idx_task_dependencies_depends', 'task_dependencies', ['depends_on_task_id'], unique=False)
    op.alter_column('task_dependencies', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('uq_system_tags_name', 'system_tags', type_='unique')
    op.create_unique_constraint('system_tags_name_key', 'system_tags', ['name'])
    op.alter_column('system_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index('idx_sessions_user', 'sessions', ['user_id'], unique=False)
    op.create_index('idx_sessions_token', 'sessions', ['token'], unique=False)
    op.create_index('idx_sessions_expires', 'sessions', ['expires_at'], unique=False)
    op.create_index('idx_saved_videos_user', 'saved_videos', ['user_id'], unique=False)
    op.create_index('idx_saved_songs_user', 'saved_songs', ['user_id'], unique=False)
    op.create_unique_constraint('saved_messages_message_id_key', 'saved_messages', ['message_id'])
    op.create_index('idx_saved_messages_user', 'saved_messages', ['user_id'], unique=False)
    op.create_index('idx_saved_images_user', 'saved_images', ['user_id'], unique=False)
    op.create_index('idx_research_sessions_user', 'research_sessions', ['user_id'], unique=False)
    op.create_index('idx_research_sessions_task', 'research_sessions', ['task_id'], unique=False)
    op.create_index('idx_research_sessions_status', 'research_sessions', ['status'], unique=False)
    op.create_index('idx_research_sessions_project', 'research_sessions', ['project_id'], unique=False)
    op.alter_column('research_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=True,
               existing_server_default=sa.text("'new'::research_status"))
    op.create_index('idx_research_references_type', 'research_references', ['type'], unique=False)
    op.create_index('idx_research_references_finding', 'research_references', ['finding_id'], unique=False)
    op.alter_column('research_references', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_references', 'url',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('research_references', 'title',
               existing_type=sa.TEXT(),
               nullable=False)
    op.drop_column('research_references', 'content')
    op.create_index('idx_research_interactions_user', 'research_interactions', ['user_id'], unique=False)
    op.create_index('idx_research_interactions_type', 'research_interactions', ['interaction_type'], unique=False)
    op.create_index('idx_research_interactions_finding', 'research_interactions', ['finding_id'], unique=False)
    op.alter_column('research_interactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index('idx_research_findings_type', 'research_findings', ['content_type'], unique=False)
    op.create_index('idx_research_findings_tags', 'research_findings', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_research_findings_session', 'research_findings', ['session_id'], unique=False)
    op.create_index('idx_research_findings_project', 'research_findings', ['project_id'], unique=False)
    op.create_index('idx_research_findings_categories', 'research_findings', ['categories'], unique=False, postgresql_using='gin')
    op.alter_column('research_findings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('uq_projects_user_title', 'projects', type_='unique')
    op.create_unique_constraint('projects_user_id_title_key', 'projects', ['user_id', 'title'])
    op.create_index('idx_projects_user', 'projects', ['user_id'], unique=False)
    op.create_index('idx_projects_status', 'projects', ['status'], unique=False)
    op.create_index('idx_projects_focus', 'projects', ['focus'], unique=False)
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'budget',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True)
    op.alter_column('projects', 'start_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'focus',
               existing_type=postgresql.ENUM('DEFAULT', 'VISUAL_MEDIA', 'AUDIO_MEDIA', 'CODE', 'RESEARCH', 'PLANNING', 'WRITING', 'EDUCATION', 'DATA_ANALYSIS', name='project_focus'),
               nullable=True,
               existing_server_default=sa.text("'DEFAULT'::project_focus"))
    op.alter_column('projects', 'status',
               existing_type=postgresql.ENUM('new', 'planning', 'in_progress', 'active', 'paused', 'stale', 'postponed', 'completed', 'abandoned', 'archived', name='project_status'),
               nullable=True,
               existing_server_default=sa.text("'active'::project_status"))
    op.drop_column('projects', 'deleted_at')
    op.create_foreign_key('fk_user_tag', 'project_tags', 'user_tags', ['tag_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.create_foreign_key('fk_system_tag', 'project_tags', 'system_tags', ['tag_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.create_index('idx_project_tags_tag', 'project_tags', ['tag_id'], unique=False)
    op.create_index('idx_project_tags_project', 'project_tags', ['project_id'], unique=False)
    op.alter_column('project_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index('idx_project_collaborators_user', 'project_collaborators', ['user_id'], unique=False)
    op.create_index('idx_project_collaborators_project', 'project_collaborators', ['project_id'], unique=False)
    op.alter_column('project_collaborators', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index('idx_product_ideas_user', 'product_ideas', ['user_id'], unique=False)
    op.create_index('idx_product_ideas_task', 'product_ideas', ['task_id'], unique=False)
    op.create_index('idx_product_ideas_status', 'product_ideas', ['status'], unique=False)
    op.create_index('idx_product_ideas_category', 'product_ideas', ['category'], unique=False)
    op.alter_column('product_ideas', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_ideas', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_ideas', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=True,
               existing_server_default=sa.text("'new'::research_status"))
    op.create_index('idx_memory_type', 'memory_vectors', ['memory_type'], unique=False)
    op.create_index('idx_memory_temporal', 'memory_vectors', ['temporal_context'], unique=False)
    op.create_index('idx_memory_categories', 'memory_vectors', ['categories'], unique=False, postgresql_using='gin')
    op.create_index('idx_memory_agent', 'memory_vectors', ['agent_id'], unique=False)
    op.alter_column('memory_vectors', 'memory_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_index('idx_media_history_user', 'media_generation_history', ['user_id'], unique=False)
    op.create_index('idx_media_history_type', 'media_generation_history', ['media_type'], unique=False)
    op.create_index('idx_media_history_agent', 'media_generation_history', ['agent_id'], unique=False)
    op.drop_index(op.f('ix_llm_providers_name'), table_name='llm_providers')
    op.create_unique_constraint('llm_providers_name_key', 'llm_providers', ['name'])
    op.alter_column('llm_providers', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_constraint('uq_llm_models_provider_model', 'llm_models', type_='unique')
    op.drop_index(op.f('ix_llm_models_name'), table_name='llm_models')
    op.create_unique_constraint('llm_models_provider_id_model_id_key', 'llm_models', ['provider_id', 'model_id'])
    op.alter_column('llm_models', 'provider_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_index('idx_integration_logs_type', 'integration_logs', ['integration_type'], unique=False)
    op.create_index('idx_integration_logs_status', 'integration_logs', ['status'], unique=False)
    op.create_index('idx_integration_logs_created_at', 'integration_logs', [sa.literal_column('created_at DESC')], unique=False)
    op.drop_constraint(op.f('uq_integration_configs_integration_type'), 'integration_configs', type_='unique')
    op.create_unique_constraint('integration_configs_integration_type_key', 'integration_configs', ['integration_type'])
    op.create_index('idx_integration_permissions', 'integration_configs', ['agent_permissions'], unique=False, postgresql_using='gin')
    op.drop_constraint('uq_file_versions_original_version', 'file_versions', type_='unique')
    op.create_index('idx_file_versions_original', 'file_versions', ['original_file_id'], unique=False)
    op.create_unique_constraint('file_versions_original_file_id_version_number_key', 'file_versions', ['original_file_id', 'version_number'])
    op.create_foreign_key('fk_research_session', 'file_relationships', 'research_sessions', ['related_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.create_foreign_key('fk_conversation', 'file_relationships', 'conversations', ['related_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.create_foreign_key('fk_project', 'file_relationships', 'projects', ['related_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.drop_constraint('uq_file_relationships_unique', 'file_relationships', type_='unique')
    op.create_index('idx_file_relationships_related', 'file_relationships', ['related_type', 'related_id'], unique=False)
    op.create_index('idx_file_relationships_file', 'file_relationships', ['file_id'], unique=False)
    op.create_index('idx_file_relationships_context', 'file_relationships', ['relationship_context'], unique=False)
    op.create_unique_constraint('file_relationships_file_id_related_type_related_id_key', 'file_relationships', ['file_id', 'related_type', 'related_id'])
    op.drop_constraint('uq_event_attendees_unique', 'event_attendees', type_='unique')
    op.create_index('idx_event_attendees_user', 'event_attendees', ['user_id'], unique=False)
    op.create_index('idx_event_attendees_status', 'event_attendees', ['response_status'], unique=False)
    op.create_index('idx_event_attendees_event', 'event_attendees', ['event_id'], unique=False)
    op.create_unique_constraint('event_attendees_event_id_user_id_key', 'event_attendees', ['event_id', 'user_id'])
    op.alter_column('event_attendees', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_attendees', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.add_column('conversations', sa.Column('is_archived', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('archive_reason', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.create_unique_constraint('unique_conversation_project', 'conversations', ['id', 'project_id'])
    op.create_index('idx_conversations_user_id', 'conversations', ['user_id'], unique=False)
    op.create_index('idx_conversations_project', 'conversations', ['project_id'], unique=False)
    op.create_index('idx_conversations_archived', 'conversations', ['is_archived'], unique=False)
    op.add_column('conversation_messages', sa.Column('type', sa.VARCHAR(length=50), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=True))
    op.add_column('conversation_messages', sa.Column('sender', sa.UUID(), autoincrement=False, nullable=True))
    op.create_index('idx_conversation_messages_conversation_id', 'conversation_messages', ['conversation_id'], unique=False)
    op.create_index('idx_calendar_tasks_user', 'calendar_tasks', ['user_id'], unique=False)
    op.create_index('idx_calendar_tasks_tags', 'calendar_tasks', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_calendar_tasks_status', 'calendar_tasks', ['status'], unique=False)
    op.create_index('idx_calendar_tasks_project', 'calendar_tasks', ['project_id'], unique=False)
    op.create_index('idx_calendar_tasks_priority', 'calendar_tasks', ['priority'], unique=False)
    op.create_index('idx_calendar_tasks_parent', 'calendar_tasks', ['parent_task_id'], unique=False)
    op.create_index('idx_calendar_tasks_due_date', 'calendar_tasks', ['due_date'], unique=False)
    op.create_index('idx_calendar_tasks_assigned', 'calendar_tasks', ['assigned_to'], unique=False)
    op.alter_column('calendar_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               nullable=True,
               existing_server_default=sa.text("'medium'::task_priority"))
    op.alter_column('calendar_tasks', 'status',
               existing_type=postgresql.ENUM('todo', 'in_progress', 'blocked', 'completed', 'cancelled', 'deferred', name='user_task_status'),
               nullable=True,
               existing_server_default=sa.text("'todo'::user_task_status"))
    op.alter_column('calendar_events', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.add_column('agents', sa.Column('last_active', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('agents', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('agents', sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('agents', sa.Column('last_error', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('agents', sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.create_foreign_key('agents_created_by_fkey', 'agents', 'users', ['created_by'], ['id'])
    op.create_index('idx_agents_created_by', 'agents', ['created_by'], unique=False)
    op.create_index('idx_agent_feedback_type', 'agent_feedback', ['feedback_type'], unique=False)
    op.create_index('idx_agent_feedback_created_at', 'agent_feedback', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_agent_feedback_agent_id', 'agent_feedback', ['agent_id'], unique=False)
    op.create_table('invitecodes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='invitecodes_pkey')
    )
    op.create_table('invite_codes',
    sa.Column('code', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='The unique invite code string.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp when the invite code was created.'),
    sa.CheckConstraint('char_length(code::text) > 0', name='code_length_check'),
    sa.PrimaryKeyConstraint('code', name='invite_codes_pkey'),
    comment='Stores single-use invite codes for user registration.'
    )
    op.create_table('schema_migrations',
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('version', name='schema_migrations_pkey')
    )
    op.drop_index(op.f('ix_minion_llm_configs_config_key'), table_name='minion_llm_configs')
    op.drop_table('minion_llm_configs')
    op.drop_table('invite_codes')
    # ### end Alembic commands ###
