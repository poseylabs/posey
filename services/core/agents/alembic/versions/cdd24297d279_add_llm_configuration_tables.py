"""Add LLM configuration tables

Revision ID: cdd24297d279
Revises: 
Create Date: 2025-04-12 23:30:20.673026

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cdd24297d279'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('minion_llm_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('config_key', sa.String(), nullable=False),
    sa.Column('llm_model_id', sa.UUID(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('top_p', sa.Float(), nullable=True),
    sa.Column('frequency_penalty', sa.Float(), nullable=True),
    sa.Column('presence_penalty', sa.Float(), nullable=True),
    sa.Column('additional_settings', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['llm_model_id'], ['llm_models.id'], name=op.f('fk_minion_llm_configs_llm_model_id_llm_models')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_minion_llm_configs'))
    )
    op.create_index(op.f('ix_minion_llm_configs_config_key'), 'minion_llm_configs', ['config_key'], unique=True)
    op.create_table('user_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('priority', sa.String(), nullable=False),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('reminder_at', sa.DateTime(), nullable=True),
    sa.Column('assigned_to', sa.UUID(), nullable=True),
    sa.Column('parent_task_id', sa.UUID(), nullable=True),
    sa.Column('estimated_duration', sa.Interval(), nullable=True),
    sa.Column('completion_time', sa.Interval(), nullable=True),
    sa.Column('tags', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], name=op.f('fk_user_tasks_assigned_to_users')),
    sa.ForeignKeyConstraint(['parent_task_id'], ['user_tasks.id'], name=op.f('fk_user_tasks_parent_task_id_user_tasks')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_user_tasks_project_id_projects')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_tasks_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_tasks'))
    )
    op.drop_index('idx_saved_messages_user', table_name='saved_messages')
    op.drop_table('saved_messages')
    op.drop_index('idx_integration_logs_created_at', table_name='integration_logs')
    op.drop_index('idx_integration_logs_status', table_name='integration_logs')
    op.drop_index('idx_integration_logs_type', table_name='integration_logs')
    op.drop_table('integration_logs')
    op.drop_index('idx_user_files_agent', table_name='user_files')
    op.drop_index('idx_user_files_source', table_name='user_files')
    op.drop_index('idx_user_files_tags', table_name='user_files', postgresql_using='gin')
    op.drop_index('idx_user_files_task', table_name='user_files')
    op.drop_index('idx_user_files_user', table_name='user_files')
    op.drop_table('user_files')
    op.drop_index('idx_file_versions_original', table_name='file_versions')
    op.drop_table('file_versions')
    op.drop_index('idx_file_relationships_context', table_name='file_relationships')
    op.drop_index('idx_file_relationships_file', table_name='file_relationships')
    op.drop_index('idx_file_relationships_related', table_name='file_relationships')
    op.drop_table('file_relationships')
    op.drop_table('agent_training_history')
    op.drop_table('llm_api_keys')
    op.drop_index('idx_sessions_expires', table_name='sessions')
    op.drop_index('idx_sessions_token', table_name='sessions')
    op.drop_index('idx_sessions_user', table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('idx_saved_videos_user', table_name='saved_videos')
    op.drop_table('saved_videos')
    op.drop_index('idx_agent_feedback_agent_id', table_name='agent_feedback')
    op.drop_index('idx_agent_feedback_created_at', table_name='agent_feedback')
    op.drop_index('idx_agent_feedback_type', table_name='agent_feedback')
    op.drop_table('agent_feedback')
    op.drop_index('idx_media_history_agent', table_name='media_generation_history')
    op.drop_index('idx_media_history_type', table_name='media_generation_history')
    op.drop_index('idx_media_history_user', table_name='media_generation_history')
    op.drop_table('media_generation_history')
    op.drop_table('invite_codes')
    op.drop_table('migrations')
    op.drop_index('idx_integration_permissions', table_name='integration_configs', postgresql_using='gin')
    op.drop_table('integration_configs')
    op.drop_table('seed_versions')
    op.drop_table('schema_migrations')
    op.drop_index('idx_conversation_messages_conversation_id', table_name='conversation_messages')
    op.drop_table('conversation_messages')
    op.drop_index('idx_memory_agent', table_name='memory_vectors')
    op.drop_index('idx_memory_categories', table_name='memory_vectors', postgresql_using='gin')
    op.drop_index('idx_memory_temporal', table_name='memory_vectors')
    op.drop_index('idx_memory_type', table_name='memory_vectors')
    op.drop_table('memory_vectors')
    op.drop_index('idx_agent_type_creative', table_name='agents', postgresql_where="(type = 'creative'::agent_type)")
    op.drop_index('idx_agents_created_by', table_name='agents')
    op.drop_index('idx_agents_model_id', table_name='agents')
    op.drop_index('idx_agents_provider_id', table_name='agents')
    op.drop_index('idx_agents_status', table_name='agents')
    op.drop_index('idx_agents_type', table_name='agents')
    op.drop_table('agents')
    op.drop_index('idx_saved_images_user', table_name='saved_images')
    op.drop_table('saved_images')
    op.drop_table('invitecodes')
    op.drop_index('idx_saved_songs_user', table_name='saved_songs')
    op.drop_table('saved_songs')
    op.drop_index('idx_calendar_tasks_assigned', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_due_date', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_parent', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_priority', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_project', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_status', table_name='calendar_tasks')
    op.drop_index('idx_calendar_tasks_tags', table_name='calendar_tasks', postgresql_using='gin')
    op.drop_index('idx_calendar_tasks_user', table_name='calendar_tasks')
    op.drop_table('calendar_tasks')
    op.drop_index('idx_product_ideas_category', table_name='product_ideas')
    op.drop_index('idx_product_ideas_status', table_name='product_ideas')
    op.drop_index('idx_product_ideas_task', table_name='product_ideas')
    op.drop_index('idx_product_ideas_user', table_name='product_ideas')
    op.drop_table('product_ideas')
    op.alter_column('background_tasks', 'status',
               existing_type=postgresql.ENUM('pending', 'in_progress', 'analyzing', 'paused', 'completed', 'failed', 'cancelled', name='task_status'),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::task_status"))
    op.alter_column('background_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'medium'::task_priority"))
    op.drop_index('idx_tasks_next_run', table_name='background_tasks', postgresql_where="(status = 'pending'::task_status)")
    op.drop_index('idx_tasks_status', table_name='background_tasks')
    op.drop_index('idx_tasks_user', table_name='background_tasks')
    op.alter_column('calendar_events', 'start_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('calendar_events', 'end_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('calendar_events', 'recurrence',
               existing_type=postgresql.ENUM('none', 'daily', 'weekly', 'biweekly', 'monthly', 'yearly', 'custom', name='event_recurrence'),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'none'::event_recurrence"))
    op.alter_column('calendar_events', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('calendar_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_events', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_events', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('idx_calendar_events_end', table_name='calendar_events')
    op.drop_index('idx_calendar_events_project', table_name='calendar_events')
    op.drop_index('idx_calendar_events_recurrence', table_name='calendar_events')
    op.drop_index('idx_calendar_events_start', table_name='calendar_events')
    op.drop_index('idx_calendar_events_tags', table_name='calendar_events', postgresql_using='gin')
    op.drop_index('idx_calendar_events_user', table_name='calendar_events')
    op.drop_index('idx_conversations_archived', table_name='conversations')
    op.drop_index('idx_conversations_project', table_name='conversations')
    op.drop_index('idx_conversations_user_id', table_name='conversations')
    op.drop_constraint('unique_conversation_project', 'conversations', type_='unique')
    op.drop_column('conversations', 'updated_at')
    op.drop_column('conversations', 'created_at')
    op.drop_column('conversations', 'status')
    op.drop_column('conversations', 'metadata')
    op.drop_column('conversations', 'last_activity')
    op.drop_column('conversations', 'is_archived')
    op.drop_column('conversations', 'archive_reason')
    op.alter_column('event_attendees', 'response_status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::text"))
    op.alter_column('event_attendees', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_attendees', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('event_attendees_event_id_user_id_key', 'event_attendees', type_='unique')
    op.drop_index('idx_event_attendees_event', table_name='event_attendees')
    op.drop_index('idx_event_attendees_status', table_name='event_attendees')
    op.drop_index('idx_event_attendees_user', table_name='event_attendees')
    op.add_column('llm_models', sa.Column('slug', sa.String(), nullable=False))
    op.add_column('llm_models', sa.Column('max_output_tokens', sa.Integer(), nullable=True))
    op.add_column('llm_models', sa.Column('is_enabled', sa.Boolean(), nullable=False))
    op.add_column('llm_models', sa.Column('supports_tools', sa.Boolean(), nullable=True))
    op.add_column('llm_models', sa.Column('model_metadata', sa.JSON(), nullable=True))
    op.alter_column('llm_models', 'provider_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('llm_models', 'context_window',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint('llm_models_provider_id_model_id_key', 'llm_models', type_='unique')
    op.create_index(op.f('ix_llm_models_name'), 'llm_models', ['name'], unique=False)
    op.create_index(op.f('ix_llm_models_slug'), 'llm_models', ['slug'], unique=True)
    op.drop_column('llm_models', 'max_tokens')
    op.drop_column('llm_models', 'model_id')
    op.drop_column('llm_models', 'is_active')
    op.drop_column('llm_models', 'config')
    op.drop_column('llm_models', 'embedding_dimensions')
    op.drop_column('llm_models', 'capabilities')
    op.drop_column('llm_models', 'supports_embeddings')
    op.drop_column('llm_models', 'cost_per_token')
    op.add_column('llm_providers', sa.Column('api_base_url', sa.String(), nullable=True))
    op.add_column('llm_providers', sa.Column('is_enabled', sa.Boolean(), nullable=False))
    op.add_column('llm_providers', sa.Column('provider_metadata', sa.JSON(), nullable=True))
    op.drop_constraint('llm_providers_name_key', 'llm_providers', type_='unique')
    op.create_index(op.f('ix_llm_providers_name'), 'llm_providers', ['name'], unique=True)
    op.drop_column('llm_providers', 'base_url')
    op.drop_column('llm_providers', 'is_active')
    op.drop_column('llm_providers', 'api_version')
    op.alter_column('project_collaborators', 'role',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('project_collaborators', 'permissions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('project_collaborators', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_project_collaborators_project', table_name='project_collaborators')
    op.drop_index('idx_project_collaborators_user', table_name='project_collaborators')
    op.alter_column('project_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_project_tags_project', table_name='project_tags')
    op.drop_index('idx_project_tags_tag', table_name='project_tags')
    op.drop_constraint('fk_user_tag', 'project_tags', type_='foreignkey')
    op.drop_constraint('fk_system_tag', 'project_tags', type_='foreignkey')
    op.add_column('projects', sa.Column('deleted_at', sa.DateTime(), nullable=True))
    op.alter_column('projects', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('projects', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('projects', 'status',
               existing_type=postgresql.ENUM('new', 'planning', 'in_progress', 'active', 'paused', 'stale', 'postponed', 'completed', 'abandoned', 'archived', name='project_status'),
               type_=sa.String(),
               nullable=False,
               existing_server_default=sa.text("'active'::project_status"))
    op.alter_column('projects', 'focus',
               existing_type=postgresql.ENUM('DEFAULT', 'VISUAL_MEDIA', 'AUDIO_MEDIA', 'CODE', 'RESEARCH', 'PLANNING', 'WRITING', 'EDUCATION', 'DATA_ANALYSIS', name='project_focus'),
               type_=sa.String(),
               nullable=False,
               existing_server_default=sa.text("'DEFAULT'::project_focus"))
    op.alter_column('projects', 'start_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'due_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('projects', 'budget',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('projects', 'project_colors',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('projects', 'logo_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('projects', 'ai_overview',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('projects', 'last_overview_update',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('projects', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_projects_focus', table_name='projects')
    op.drop_index('idx_projects_status', table_name='projects')
    op.drop_index('idx_projects_user', table_name='projects')
    op.drop_constraint('projects_user_id_title_key', 'projects', type_='unique')
    op.alter_column('research_findings', 'content_type',
               existing_type=postgresql.ENUM('text', 'link', 'image', 'audio', 'video', 'document', 'spreadsheet', 'dataset', 'code', 'spreadsheet_data', 'document_text', 'extracted_table', 'converted_file', 'other', name='content_type'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('research_findings', 'categories',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('research_findings', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('research_findings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_research_findings_categories', table_name='research_findings', postgresql_using='gin')
    op.drop_index('idx_research_findings_project', table_name='research_findings')
    op.drop_index('idx_research_findings_session', table_name='research_findings')
    op.drop_index('idx_research_findings_tags', table_name='research_findings', postgresql_using='gin')
    op.drop_index('idx_research_findings_type', table_name='research_findings')
    op.alter_column('research_interactions', 'interaction_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('research_interactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_research_interactions_finding', table_name='research_interactions')
    op.drop_index('idx_research_interactions_type', table_name='research_interactions')
    op.drop_index('idx_research_interactions_user', table_name='research_interactions')
    op.drop_column('research_interactions', 'notes')
    op.add_column('research_references', sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('research_references', 'type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('research_references', 'title',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('research_references', 'url',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('research_references', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_research_references_finding', table_name='research_references')
    op.drop_index('idx_research_references_type', table_name='research_references')
    op.drop_column('research_references', 'summary')
    op.alter_column('research_sessions', 'status',
               existing_type=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               type_=sa.String(),
               nullable=False,
               existing_server_default=sa.text("'new'::research_status"))
    op.alter_column('research_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('idx_research_sessions_project', table_name='research_sessions')
    op.drop_index('idx_research_sessions_status', table_name='research_sessions')
    op.drop_index('idx_research_sessions_task', table_name='research_sessions')
    op.drop_index('idx_research_sessions_user', table_name='research_sessions')
    op.alter_column('system_tags', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('system_tags', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('system_tags', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('system_tags', 'color',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('system_tags', 'icon',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('system_tags', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('system_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('system_tags_name_key', 'system_tags', type_='unique')
    op.create_unique_constraint(op.f('uq_system_tags_name'), 'system_tags', ['name'])
    op.alter_column('task_dependencies', 'dependency_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('task_dependencies', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_task_dependencies_depends', table_name='task_dependencies')
    op.drop_index('idx_task_dependencies_task', table_name='task_dependencies')
    op.drop_constraint('task_dependencies_task_id_depends_on_task_id_key', 'task_dependencies', type_='unique')
    op.drop_constraint('task_dependencies_depends_on_task_id_fkey', 'task_dependencies', type_='foreignkey')
    op.drop_constraint('task_dependencies_task_id_fkey', 'task_dependencies', type_='foreignkey')
    op.create_foreign_key(op.f('fk_task_dependencies_depends_on_task_id_user_tasks'), 'task_dependencies', 'user_tasks', ['depends_on_task_id'], ['id'])
    op.create_foreign_key(op.f('fk_task_dependencies_task_id_user_tasks'), 'task_dependencies', 'user_tasks', ['task_id'], ['id'])
    op.alter_column('user_tags', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('user_tags', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('user_tags', 'color',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('user_tags', 'icon',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('user_tags', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('user_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_user_tags_user', table_name='user_tags')
    op.drop_constraint('user_tags_user_id_name_key', 'user_tags', type_='unique')
    op.add_column('users', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('users', sa.Column('hashed_password', sa.String(), nullable=False))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_superuser', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('permissions', sa.ARRAY(sa.String()), nullable=True))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(), nullable=True))
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('users', 'preferences',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_role', table_name='users')
    op.drop_index('idx_users_status', table_name='users')
    op.drop_index('idx_users_username', table_name='users')
    op.drop_index('users_email_idx', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_index('users_username_idx', table_name='users')
    op.drop_constraint('users_username_key', 'users', type_='unique')
    op.create_unique_constraint(op.f('uq_users_email'), 'users', ['email'])
    op.create_unique_constraint(op.f('uq_users_username'), 'users', ['username'])
    op.drop_column('users', 'two_factor_secret')
    op.drop_column('users', 'reset_token')
    op.drop_column('users', 'name')
    op.drop_column('users', 'role')
    op.drop_column('users', 'last_active')
    op.drop_column('users', 'status')
    op.drop_column('users', 'two_factor_enabled')
    op.drop_column('users', 'reset_token_expiry')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('reset_token_expiry', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('two_factor_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_active', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('role', sa.VARCHAR(length=50), server_default=sa.text("'user'::character varying"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('reset_token', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('two_factor_secret', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('uq_users_username'), 'users', type_='unique')
    op.drop_constraint(op.f('uq_users_email'), 'users', type_='unique')
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_index('users_username_idx', 'users', ['username'], unique=False)
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('users_email_idx', 'users', ['email'], unique=False)
    op.create_index('idx_users_username', 'users', ['username'], unique=False)
    op.create_index('idx_users_status', 'users', ['status'], unique=False)
    op.create_index('idx_users_role', 'users', ['role'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'preferences',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'permissions')
    op.drop_column('users', 'is_superuser')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'full_name')
    op.create_unique_constraint('user_tags_user_id_name_key', 'user_tags', ['user_id', 'name'])
    op.create_index('idx_user_tags_user', 'user_tags', ['user_id'], unique=False)
    op.alter_column('user_tags', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_tags', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_tags', 'metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('user_tags', 'icon',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('user_tags', 'color',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('user_tags', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('user_tags', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(op.f('fk_task_dependencies_task_id_user_tasks'), 'task_dependencies', type_='foreignkey')
    op.drop_constraint(op.f('fk_task_dependencies_depends_on_task_id_user_tasks'), 'task_dependencies', type_='foreignkey')
    op.create_foreign_key('task_dependencies_task_id_fkey', 'task_dependencies', 'calendar_tasks', ['task_id'], ['id'])
    op.create_foreign_key('task_dependencies_depends_on_task_id_fkey', 'task_dependencies', 'calendar_tasks', ['depends_on_task_id'], ['id'])
    op.create_unique_constraint('task_dependencies_task_id_depends_on_task_id_key', 'task_dependencies', ['task_id', 'depends_on_task_id'])
    op.create_index('idx_task_dependencies_task', 'task_dependencies', ['task_id'], unique=False)
    op.create_index('idx_task_dependencies_depends', 'task_dependencies', ['depends_on_task_id'], unique=False)
    op.alter_column('task_dependencies', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('task_dependencies', 'dependency_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(op.f('uq_system_tags_name'), 'system_tags', type_='unique')
    op.create_unique_constraint('system_tags_name_key', 'system_tags', ['name'])
    op.alter_column('system_tags', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('system_tags', 'metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('system_tags', 'icon',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('system_tags', 'color',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('system_tags', 'category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('system_tags', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('system_tags', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_index('idx_research_sessions_user', 'research_sessions', ['user_id'], unique=False)
    op.create_index('idx_research_sessions_task', 'research_sessions', ['task_id'], unique=False)
    op.create_index('idx_research_sessions_status', 'research_sessions', ['status'], unique=False)
    op.create_index('idx_research_sessions_project', 'research_sessions', ['project_id'], unique=False)
    op.alter_column('research_sessions', 'completed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('research_sessions', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_sessions', 'status',
               existing_type=sa.String(),
               type_=postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'),
               nullable=True,
               existing_server_default=sa.text("'new'::research_status"))
    op.add_column('research_references', sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_index('idx_research_references_type', 'research_references', ['type'], unique=False)
    op.create_index('idx_research_references_finding', 'research_references', ['finding_id'], unique=False)
    op.alter_column('research_references', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_references', 'url',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('research_references', 'title',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('research_references', 'type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('research_references', 'content')
    op.add_column('research_interactions', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_index('idx_research_interactions_user', 'research_interactions', ['user_id'], unique=False)
    op.create_index('idx_research_interactions_type', 'research_interactions', ['interaction_type'], unique=False)
    op.create_index('idx_research_interactions_finding', 'research_interactions', ['finding_id'], unique=False)
    op.alter_column('research_interactions', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_interactions', 'interaction_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_index('idx_research_findings_type', 'research_findings', ['content_type'], unique=False)
    op.create_index('idx_research_findings_tags', 'research_findings', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_research_findings_session', 'research_findings', ['session_id'], unique=False)
    op.create_index('idx_research_findings_project', 'research_findings', ['project_id'], unique=False)
    op.create_index('idx_research_findings_categories', 'research_findings', ['categories'], unique=False, postgresql_using='gin')
    op.alter_column('research_findings', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_findings', 'tags',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('research_findings', 'categories',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('research_findings', 'content_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('text', 'link', 'image', 'audio', 'video', 'document', 'spreadsheet', 'dataset', 'code', 'spreadsheet_data', 'document_text', 'extracted_table', 'converted_file', 'other', name='content_type'),
               existing_nullable=False)
    op.create_unique_constraint('projects_user_id_title_key', 'projects', ['user_id', 'title'])
    op.create_index('idx_projects_user', 'projects', ['user_id'], unique=False)
    op.create_index('idx_projects_status', 'projects', ['status'], unique=False)
    op.create_index('idx_projects_focus', 'projects', ['focus'], unique=False)
    op.alter_column('projects', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('projects', 'last_overview_update',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('projects', 'ai_overview',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('projects', 'logo_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('projects', 'project_colors',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('projects', 'budget',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True)
    op.alter_column('projects', 'due_date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('projects', 'start_date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'focus',
               existing_type=sa.String(),
               type_=postgresql.ENUM('DEFAULT', 'VISUAL_MEDIA', 'AUDIO_MEDIA', 'CODE', 'RESEARCH', 'PLANNING', 'WRITING', 'EDUCATION', 'DATA_ANALYSIS', name='project_focus'),
               nullable=True,
               existing_server_default=sa.text("'DEFAULT'::project_focus"))
    op.alter_column('projects', 'status',
               existing_type=sa.String(),
               type_=postgresql.ENUM('new', 'planning', 'in_progress', 'active', 'paused', 'stale', 'postponed', 'completed', 'abandoned', 'archived', name='project_status'),
               nullable=True,
               existing_server_default=sa.text("'active'::project_status"))
    op.alter_column('projects', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('projects', 'title',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('projects', 'deleted_at')
    op.create_foreign_key('fk_system_tag', 'project_tags', 'system_tags', ['tag_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.create_foreign_key('fk_user_tag', 'project_tags', 'user_tags', ['tag_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.create_index('idx_project_tags_tag', 'project_tags', ['tag_id'], unique=False)
    op.create_index('idx_project_tags_project', 'project_tags', ['project_id'], unique=False)
    op.alter_column('project_tags', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index('idx_project_collaborators_user', 'project_collaborators', ['user_id'], unique=False)
    op.create_index('idx_project_collaborators_project', 'project_collaborators', ['project_id'], unique=False)
    op.alter_column('project_collaborators', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('project_collaborators', 'permissions',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('project_collaborators', 'role',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('llm_providers', sa.Column('api_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('llm_providers', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('llm_providers', sa.Column('base_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_llm_providers_name'), table_name='llm_providers')
    op.create_unique_constraint('llm_providers_name_key', 'llm_providers', ['name'])
    op.drop_column('llm_providers', 'provider_metadata')
    op.drop_column('llm_providers', 'is_enabled')
    op.drop_column('llm_providers', 'api_base_url')
    op.add_column('llm_models', sa.Column('cost_per_token', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True))
    op.add_column('llm_models', sa.Column('supports_embeddings', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('llm_models', sa.Column('capabilities', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('llm_models', sa.Column('embedding_dimensions', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('llm_models', sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('llm_models', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('llm_models', sa.Column('model_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('llm_models', sa.Column('max_tokens', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_llm_models_slug'), table_name='llm_models')
    op.drop_index(op.f('ix_llm_models_name'), table_name='llm_models')
    op.create_unique_constraint('llm_models_provider_id_model_id_key', 'llm_models', ['provider_id', 'model_id'])
    op.alter_column('llm_models', 'context_window',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('llm_models', 'provider_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('llm_models', 'model_metadata')
    op.drop_column('llm_models', 'supports_tools')
    op.drop_column('llm_models', 'is_enabled')
    op.drop_column('llm_models', 'max_output_tokens')
    op.drop_column('llm_models', 'slug')
    op.create_index('idx_event_attendees_user', 'event_attendees', ['user_id'], unique=False)
    op.create_index('idx_event_attendees_status', 'event_attendees', ['response_status'], unique=False)
    op.create_index('idx_event_attendees_event', 'event_attendees', ['event_id'], unique=False)
    op.create_unique_constraint('event_attendees_event_id_user_id_key', 'event_attendees', ['event_id', 'user_id'])
    op.alter_column('event_attendees', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_attendees', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_attendees', 'response_status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::text"))
    op.add_column('conversations', sa.Column('archive_reason', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('is_archived', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.create_unique_constraint('unique_conversation_project', 'conversations', ['id', 'project_id'])
    op.create_index('idx_conversations_user_id', 'conversations', ['user_id'], unique=False)
    op.create_index('idx_conversations_project', 'conversations', ['project_id'], unique=False)
    op.create_index('idx_conversations_archived', 'conversations', ['is_archived'], unique=False)
    op.create_index('idx_calendar_events_user', 'calendar_events', ['user_id'], unique=False)
    op.create_index('idx_calendar_events_tags', 'calendar_events', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_calendar_events_start', 'calendar_events', ['start_time'], unique=False)
    op.create_index('idx_calendar_events_recurrence', 'calendar_events', ['recurrence'], unique=False)
    op.create_index('idx_calendar_events_project', 'calendar_events', ['project_id'], unique=False)
    op.create_index('idx_calendar_events_end', 'calendar_events', ['end_time'], unique=False)
    op.alter_column('calendar_events', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('calendar_events', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_events', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('calendar_events', 'tags',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('calendar_events', 'recurrence',
               existing_type=sa.String(),
               type_=postgresql.ENUM('none', 'daily', 'weekly', 'biweekly', 'monthly', 'yearly', 'custom', name='event_recurrence'),
               existing_nullable=True,
               existing_server_default=sa.text("'none'::event_recurrence"))
    op.alter_column('calendar_events', 'end_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('calendar_events', 'start_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.create_index('idx_tasks_user', 'background_tasks', ['user_id'], unique=False)
    op.create_index('idx_tasks_status', 'background_tasks', ['status'], unique=False)
    op.create_index('idx_tasks_next_run', 'background_tasks', ['next_run_at'], unique=False, postgresql_where="(status = 'pending'::task_status)")
    op.alter_column('background_tasks', 'priority',
               existing_type=sa.String(),
               type_=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               existing_nullable=True,
               existing_server_default=sa.text("'medium'::task_priority"))
    op.alter_column('background_tasks', 'status',
               existing_type=sa.String(),
               type_=postgresql.ENUM('pending', 'in_progress', 'analyzing', 'paused', 'completed', 'failed', 'cancelled', name='task_status'),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::task_status"))
    op.create_table('product_ideas',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('source_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('affiliate_links', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('subcategories', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('new', 'in_progress', 'completed', 'needs_review', 'archived', name='research_status'), server_default=sa.text("'new'::research_status"), autoincrement=False, nullable=True),
    sa.Column('estimated_commission', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('price_range', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text('\'{"max": 0, "min": 0, "currency": "USD"}\'::jsonb'), autoincrement=False, nullable=True),
    sa.Column('relevance_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['background_tasks.id'], name='product_ideas_task_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='product_ideas_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='product_ideas_pkey')
    )
    op.create_index('idx_product_ideas_user', 'product_ideas', ['user_id'], unique=False)
    op.create_index('idx_product_ideas_task', 'product_ideas', ['task_id'], unique=False)
    op.create_index('idx_product_ideas_status', 'product_ideas', ['status'], unique=False)
    op.create_index('idx_product_ideas_category', 'product_ideas', ['category'], unique=False)
    op.create_table('calendar_tasks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('todo', 'in_progress', 'blocked', 'completed', 'cancelled', 'deferred', name='user_task_status'), server_default=sa.text("'todo'::user_task_status"), autoincrement=False, nullable=True),
    sa.Column('priority', postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'), server_default=sa.text("'medium'::task_priority"), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('reminder_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('parent_task_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('estimated_duration', postgresql.INTERVAL(), autoincrement=False, nullable=True),
    sa.Column('completion_time', postgresql.INTERVAL(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], name='calendar_tasks_assigned_to_fkey'),
    sa.ForeignKeyConstraint(['parent_task_id'], ['calendar_tasks.id'], name='calendar_tasks_parent_task_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='calendar_tasks_project_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='calendar_tasks_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='calendar_tasks_pkey')
    )
    op.create_index('idx_calendar_tasks_user', 'calendar_tasks', ['user_id'], unique=False)
    op.create_index('idx_calendar_tasks_tags', 'calendar_tasks', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_calendar_tasks_status', 'calendar_tasks', ['status'], unique=False)
    op.create_index('idx_calendar_tasks_project', 'calendar_tasks', ['project_id'], unique=False)
    op.create_index('idx_calendar_tasks_priority', 'calendar_tasks', ['priority'], unique=False)
    op.create_index('idx_calendar_tasks_parent', 'calendar_tasks', ['parent_task_id'], unique=False)
    op.create_index('idx_calendar_tasks_due_date', 'calendar_tasks', ['due_date'], unique=False)
    op.create_index('idx_calendar_tasks_assigned', 'calendar_tasks', ['assigned_to'], unique=False)
    op.create_table('saved_songs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('audio_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['saved_messages.message_id'], name='saved_songs_message_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='saved_songs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='saved_songs_pkey')
    )
    op.create_index('idx_saved_songs_user', 'saved_songs', ['user_id'], unique=False)
    op.create_table('invitecodes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='invitecodes_pkey')
    )
    op.create_table('saved_images',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['saved_messages.message_id'], name='saved_images_message_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='saved_images_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='saved_images_pkey')
    )
    op.create_index('idx_saved_images_user', 'saved_images', ['user_id'], unique=False)
    op.create_table('agents',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('default', 'creative', 'research', name='agent_type'), server_default=sa.text("'default'::agent_type"), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', 'pending', 'disabled', name='agent_status'), server_default=sa.text("'active'::agent_status"), autoincrement=False, nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('capabilities', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('training_status', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('last_training', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('capability_scores', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_active', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_error', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('media_generation_config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text('\'{"audio_generation": {"last_reset": null, "used_today": 0, "daily_limit": 20}, "image_generation": {"last_reset": null, "used_today": 0, "daily_limit": 50}, "video_generation": {"last_reset": null, "used_today": 0, "daily_limit": 10}}\'::jsonb'), autoincrement=False, nullable=True),
    sa.CheckConstraint('error_count >= 0', name='valid_error_count'),
    sa.CheckConstraint('jsonb_array_length(capabilities) >= 0', name='valid_capabilities'),
    sa.CheckConstraint('validate_agent_abilities(capabilities)', name='validate_agent_abilities_check'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='agents_created_by_fkey'),
    sa.ForeignKeyConstraint(['model_id'], ['llm_models.id'], name='agents_model_id_fkey'),
    sa.ForeignKeyConstraint(['provider_id'], ['llm_providers.id'], name='agents_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='agents_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_agents_type', 'agents', ['type'], unique=False)
    op.create_index('idx_agents_status', 'agents', ['status'], unique=False)
    op.create_index('idx_agents_provider_id', 'agents', ['provider_id'], unique=False)
    op.create_index('idx_agents_model_id', 'agents', ['model_id'], unique=False)
    op.create_index('idx_agents_created_by', 'agents', ['created_by'], unique=False)
    op.create_index('idx_agent_type_creative', 'agents', ['type'], unique=False, postgresql_where="(type = 'creative'::agent_type)")
    op.create_table('memory_vectors',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('vector_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('memory_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('importance_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('temporal_context', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('categories', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("memory_type = ANY (ARRAY['fact'::text, 'preference'::text, 'experience'::text, 'skill'::text])", name='valid_memory_type'),
    sa.CheckConstraint('importance_score >= 0::double precision AND importance_score <= 1::double precision', name='valid_importance'),
    sa.PrimaryKeyConstraint('id', name='memory_vectors_pkey')
    )
    op.create_index('idx_memory_type', 'memory_vectors', ['memory_type'], unique=False)
    op.create_index('idx_memory_temporal', 'memory_vectors', ['temporal_context'], unique=False)
    op.create_index('idx_memory_categories', 'memory_vectors', ['categories'], unique=False, postgresql_using='gin')
    op.create_index('idx_memory_agent', 'memory_vectors', ['agent_id'], unique=False)
    op.create_table('conversation_messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('conversation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sender_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=True),
    sa.Column('sender', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], name='conversation_messages_conversation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='conversation_messages_pkey')
    )
    op.create_index('idx_conversation_messages_conversation_id', 'conversation_messages', ['conversation_id'], unique=False)
    op.create_table('schema_migrations',
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('version', name='schema_migrations_pkey')
    )
    op.create_table('seed_versions',
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('version', name='seed_versions_pkey')
    )
    op.create_table('integration_configs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('integration_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('provider', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('base_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('auth_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('schema', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('agent_permissions', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='integration_configs_pkey'),
    sa.UniqueConstraint('integration_type', name='integration_configs_integration_type_key')
    )
    op.create_index('idx_integration_permissions', 'integration_configs', ['agent_permissions'], unique=False, postgresql_using='gin')
    op.create_table('migrations',
    sa.Column('version', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('version', name='migrations_pkey')
    )
    op.create_table('invite_codes',
    sa.Column('code', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='The unique invite code string.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp when the invite code was created.'),
    sa.CheckConstraint('char_length(code::text) > 0', name='code_length_check'),
    sa.PrimaryKeyConstraint('code', name='invite_codes_pkey'),
    comment='Stores single-use invite codes for user registration.'
    )
    op.create_table('media_generation_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('media_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('result_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name='media_generation_history_agent_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='media_generation_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='media_generation_history_pkey')
    )
    op.create_index('idx_media_history_user', 'media_generation_history', ['user_id'], unique=False)
    op.create_index('idx_media_history_type', 'media_generation_history', ['media_type'], unique=False)
    op.create_index('idx_media_history_agent', 'media_generation_history', ['agent_id'], unique=False)
    op.create_table('agent_feedback',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('feedback_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('feedback_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("feedback_type = 'rating'::text AND rating IS NOT NULL OR (feedback_type = ANY (ARRAY['text'::text, 'issue'::text])) AND feedback_text IS NOT NULL", name='valid_feedback_content'),
    sa.CheckConstraint("feedback_type = ANY (ARRAY['rating'::text, 'text'::text, 'issue'::text])", name='valid_feedback_type'),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='agent_feedback_rating_check'),
    sa.PrimaryKeyConstraint('id', name='agent_feedback_pkey')
    )
    op.create_index('idx_agent_feedback_type', 'agent_feedback', ['feedback_type'], unique=False)
    op.create_index('idx_agent_feedback_created_at', 'agent_feedback', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_agent_feedback_agent_id', 'agent_feedback', ['agent_id'], unique=False)
    op.create_table('saved_videos',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('video_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['saved_messages.message_id'], name='saved_videos_message_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='saved_videos_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='saved_videos_pkey')
    )
    op.create_index('idx_saved_videos_user', 'saved_videos', ['user_id'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey')
    )
    op.create_index('idx_sessions_user', 'sessions', ['user_id'], unique=False)
    op.create_index('idx_sessions_token', 'sessions', ['token'], unique=False)
    op.create_index('idx_sessions_expires', 'sessions', ['expires_at'], unique=False)
    op.create_table('llm_api_keys',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('key_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('api_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['llm_providers.id'], name='llm_api_keys_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='llm_api_keys_pkey')
    )
    op.create_table('agent_training_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('capability', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('training_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name='agent_training_history_agent_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='agent_training_history_pkey')
    )
    op.create_table('file_relationships',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('file_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('related_type', postgresql.ENUM('project', 'conversation', 'research_session', name='file_relationship_type'), autoincrement=False, nullable=False),
    sa.Column('related_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('relationship_context', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['user_files.id'], name='file_relationships_file_id_fkey'),
    sa.ForeignKeyConstraint(['related_id'], ['conversations.id'], name='fk_conversation', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['related_id'], ['projects.id'], name='fk_project', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['related_id'], ['research_sessions.id'], name='fk_research_session', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name='file_relationships_pkey'),
    sa.UniqueConstraint('file_id', 'related_type', 'related_id', name='file_relationships_file_id_related_type_related_id_key')
    )
    op.create_index('idx_file_relationships_related', 'file_relationships', ['related_type', 'related_id'], unique=False)
    op.create_index('idx_file_relationships_file', 'file_relationships', ['file_id'], unique=False)
    op.create_index('idx_file_relationships_context', 'file_relationships', ['relationship_context'], unique=False)
    op.create_table('file_versions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('original_file_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('storage_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('changes_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['original_file_id'], ['user_files.id'], name='file_versions_original_file_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='file_versions_pkey'),
    sa.UniqueConstraint('original_file_id', 'version_number', name='file_versions_original_file_id_version_number_key')
    )
    op.create_index('idx_file_versions_original', 'file_versions', ['original_file_id'], unique=False)
    op.create_table('user_files',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('storage_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('source', postgresql.ENUM('user_upload', 'agent_generated', 'conversion_result', 'research_artifact', 'other', name='file_source'), server_default=sa.text("'user_upload'::file_source"), autoincrement=False, nullable=False),
    sa.Column('source_task_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('source_agent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('favorite', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_task_id'], ['background_tasks.id'], name='user_files_source_task_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_files_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_files_pkey'),
    sa.UniqueConstraint('user_id', 'storage_key', name='user_files_user_id_storage_key_key')
    )
    op.create_index('idx_user_files_user', 'user_files', ['user_id'], unique=False)
    op.create_index('idx_user_files_task', 'user_files', ['source_task_id'], unique=False)
    op.create_index('idx_user_files_tags', 'user_files', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_user_files_source', 'user_files', ['source'], unique=False)
    op.create_index('idx_user_files_agent', 'user_files', ['source_agent_id'], unique=False)
    op.create_table('integration_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('integration_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('request_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['success'::text, 'failure'::text, 'pending'::text])", name='valid_status'),
    sa.PrimaryKeyConstraint('id', name='integration_logs_pkey')
    )
    op.create_index('idx_integration_logs_type', 'integration_logs', ['integration_type'], unique=False)
    op.create_index('idx_integration_logs_status', 'integration_logs', ['status'], unique=False)
    op.create_index('idx_integration_logs_created_at', 'integration_logs', [sa.literal_column('created_at DESC')], unique=False)
    op.create_table('saved_messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('conversation_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='saved_messages_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='saved_messages_pkey'),
    sa.UniqueConstraint('message_id', name='saved_messages_message_id_key'),
    sa.UniqueConstraint('user_id', 'message_id', name='saved_messages_user_message_unique')
    )
    op.create_index('idx_saved_messages_user', 'saved_messages', ['user_id'], unique=False)
    op.drop_table('user_tasks')
    op.drop_index(op.f('ix_minion_llm_configs_config_key'), table_name='minion_llm_configs')
    op.drop_table('minion_llm_configs')
    # ### end Alembic commands ###
